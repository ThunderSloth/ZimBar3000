<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, February 28, 2015, 7:43 PM -->
<!-- MuClient version 4.96 -->

<!-- Plugin "Spot_Timer" generated by Plugin Wizard -->
<!-- Written by Zimbus (v2), modified to use GMCP data by Reva (v3+)-->
<!-- Now using GMCP data for all spots except Medina and Cocoons as those do not have GMCP data. -->
<!-- v3.4 fixed captain and multiple spots simultaneously for boss+medina and captain+smugglers -->

<muclient>
<plugin
   name="Spot_Timer3_4"
   author="Zimbus"
   id="a432532e123441ce4bf7ab63"
   language="Lua"
   purpose="display hotspot timers in sidebar miniwindow"
   save_state="y"
   date_written="2016-01-20 19:39:10"
   date_modified="2018-04-15"
   requires="4.71"
   version="3.4"
   >

</plugin>

<!--  Triggers  -->
<triggers>

  <trigger
   keep_evaluating="y"
   match="^(You bury|.* buries) (.*) deep within the (ground|earth)\.$"
   name="kill_shades"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(shades, bury_count("%0"))</send>	
  </trigger>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="^Somewhere in an alleyway \[.+\]\.$"
   name="enter_medina_glance"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(medina)</send>
  </trigger>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="^\[somewhere in an alleyway\]$"
   name="enter_medina"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(medina)</send>
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^(?!Somewhere in an alleyway)[a-zA-Z ']+ \[.+\]\.$"
   name="exit_medina_glance"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(medina)</send>
  </trigger>
  <trigger
   keep_evaluating="n"
   match="^\[(?!(\[.+\]\w+\:.+\]|somewhere in an alleyway|.*(specialized|birthday|Discworld|achievement|first time|killed by|gains a level|Cpu|Machine|Reclaimed|Cleaning|joined the|now worshipping|now a member of).*)).*\]$"
   name="exit_medina"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(medina)</send>
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) (a|the) Triad (thug|heavy)\.$"
   name="kill_medina"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(medina)</send>	
  </trigger>
  <trigger
   ignore_case="y"
   enabled="n"
   keep_evaluating="y"
   match="^(?!(.* (tells|asks)|\[.+\] \w+|\(\w+\) \w+)).*the smuggler captain.*"
   name="enter_captain"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(captain)</send>
  </trigger>
   <trigger
   keep_evaluating="y"
   match="^.* (?:tidy|tidies) up the place, clearing away .* corpse of the smuggler captain.*\.$"
   name="exit_captain"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(captain)</send>
  </trigger>  
	<trigger
   enabled="n"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the smuggler captain\.$"
   name="kill_captain"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(captain)</send>	
  </trigger>
  <trigger
   ignore_case="y"
   enabled="n"
   keep_evaluating="y"
   match="^(.*the Triad boss.* moves? aggressively towards you!|.*the Triad boss.*(standing|fighting) here)$"
   name="enter_boss"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(boss)</send>
  </trigger>
   <trigger
   keep_evaluating="y"
   match="^.*(bury|buries) .* corpse of a Triad boss.* deep within the (ground|earth)\.$"
   name="exit_boss"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(boss)</send>
  </trigger>  
	<trigger
   enabled="n"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the Triad boss\.$"
   name="kill_boss"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(boss)</send>	
  </trigger>
  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) Hlakket"
   name="kill_rathole"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(rathole)</send>	
  </trigger>

  <trigger
   enabled="n"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+ smuggler( captain)?\.$"
   name="kill_smugs"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(smugs)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+ crocodile\.$"
   name="kill_crocs"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(crocs)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) (the|a) ceremonial (guard|sentry)\.$"
   name="kill_cguards"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(cguards)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) \w+ (Gumboni|Harvard|Marchella|Ciaco).*\.$"
   name="kill_casino"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(casino)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the .*(rujona|outlaw)\.$"
   name="kill_snail"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(snail)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+ student\.$"
   name="kill_dojo"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(dojo)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.*(kill|deals the death blow to) (the|a) giant( leader)?\.$"
   name="kill_giants"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(giants) 
  </send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) \w+ (Corrola|Accardo|Enrico|Casso).*\.$"
   name="kill_stables"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(stables)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) (a|the|an) (\w+ )+lion\.$"
   name="kill_shaker"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(shaker)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) .*grflx.*\.$"
   name="kill_grflx"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(grflx)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the Imperial guard\.$"
   name="kill_parades"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(parades)</send>	
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) (Delbert|the \w+ (troll|man))\.$"
   name="kill_delbert"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(delbert)</send>	
  </trigger>
  
  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+ captain\.$"
   name="kill_bmarket"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(bmarket)</send>	
  </trigger>
  
  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the .*?\.$"
   name="kill_oasis"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(oasis)</send>	
  </trigger>  

  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+( \w+)? nobleman\.$"
   name="kill_cats"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(cats)</send>	
  </trigger>   

  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the \w+( \w+)? nobleman\.$"
   name="kill_dhs"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(dhs)</send>	
  </trigger>  
  
  <trigger
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) \w+ (Cicone|Clemence|DeBois).*\.$"
   name="kill_pizza"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(pizza)</send>	
  </trigger>

  
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:The end of an|A large) underground tunnel \[.+\]\.$"
   name="enter_coons_glance"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(coons)</send>
  </trigger>
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^\[(?:end of an|large) underground tunnel\]$"
   name="enter_coons"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>enter_spot(coons)</send>
  </trigger>

  <trigger
   keep_evaluating="y"
   match="^(?!(The end of an|A large) underground tunnel)[a-zA-Z ']+ \[.+\]\.$"
   name="exit_coons_glance"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(coons)</send>
  </trigger>
  <trigger
   keep_evaluating="y"
   match="^\[(?!(.* xp/h\]|(end of an|large) underground tunnel|.*(specialized|birthday|Discworld|achievement|first time|killed by|gains a level|Cpu|Machine|Reclaimed|Cleaning|joined the|now worshipping|now a member of).*)).*\]$"
   name="exit_coons"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>exit_spot(coons)</send>
  </trigger>

  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the .*?\.$"
   name="kill_coons"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(coons)</send>	
  </trigger>  

  <trigger
   ignore_case="y"
   keep_evaluating="y"
   match="^.* (kill|deals the death blow to) the .*?\.$"
   name="kill_vamps"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>kill_spot(vamps)</send>	
  </trigger>  


  <trigger
   custom_colour="17"
   enabled="y"
   lines_to_match="2"
   keep_evaluating="y"
   match="^(?!\*\*.*).*\n.*tells you: (.*)\:([0-9]+)\:((([0-9]+),(f|[0-9]+),(f|[0-9]+),(f|[0-9]+)\|)+)$"
   multi_line="y"
   regexp="y"
   send_to="12"
   sequence="4"
   other_text_colour="darkorchid"
  >
  <send>
  get_sync("%1", "%2", "%3")
  Note("Got sync.")
  </send>
  </trigger>
  <trigger
   enabled="y"
   ignore_case="y"
   keep_evaluating="y"
   match="^(?:> )?Hp: (\d+) ?\((\d+)\) (?:Gp: (\d+) ?\((\d+)\)) (?:Xp: (\d+))"
   regexp="y"
   send_to="12"
   sequence="3"
   variable="test"
  >
  <send>
	timer_xp = tonumber("%5")
	set_xp(timer_xp)
  </send>
  </trigger>


</triggers>


<!--  Aliases  -->

<aliases>
<alias
   match="^rs( ([a-z]+)( ([0-9]+))?)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
	if ("%2" ~= "") then
		for i, v in ipairs(hot_spots) do
			if "%2" == v[spot_name] then
				if ("%4" ~= "") then
					reset_spot(i, tonumber("%4"))
				else
					reset_spot(i)
				end
				break
			end
		end
	else
		reset_spot()
	end
  </send>
  </alias> 
  <alias
   match="^font (.+)"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  if "%1" == "test" then
	Note(varFont)
  else
	varFont = "%1"
	SetFontSize()
	Note("%1")
  end
  </send>
  </alias> 
  <alias
   match="^gspot$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
text_to_send = "group say "
for i, v in sort_spots(hot_spots, "time") do
	if v[time_entered] then
		time_to_display = math.ceil((os.time() - v[time_entered])/60)
	else
		time_to_display = "?"
	end
	if v[spot_down] then
		name_to_display = v[spot_name]..": "..time_to_display
	else
		name_to_display = "*"..v[spot_name]..": "..time_to_display
	end	
	if not(v[hidden]) and v[time_entered] then
		text_to_send = text_to_send..name_to_display.." | "
	end
end
text_to_send = text_to_send:gsub(" | $", "")
Send(text_to_send)
  </send>
  </alias> 

  <alias
   match="^tmr (.+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
text_to_send = "%1 "
for i, v in sort_spots(hot_spots, "time") do
	if v[time_entered] then
		time_to_display = math.ceil((os.time() - v[time_entered])/60)
	else
		time_to_display = "?"
	end
	if v[spot_down] then
		name_to_display = v[spot_name]..": "..time_to_display
	else
		name_to_display = "*"..v[spot_name]..": "..time_to_display
	end	
	if not(v[hidden]) and v[time_entered] then
		text_to_send = text_to_send..name_to_display.." | "
	end
end
text_to_send = text_to_send:gsub(" | $", "")
Send(text_to_send)
  </send>
  </alias> 
    <alias
   match="^synch? (.*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  sync("%1")
  </send>
  </alias>
  <alias
   match="^showspot (\w+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
	for i, v in ipairs(hot_spots) do
		if "%1" == v[spot_name] then
			if v[hidden] then
				Note("showing: ", v[spot_name])
				hot_spots[i][hidden] = false
				shown_spot_count = shown_spot_count + 1
			else
				Note("hiding: ", v[spot_name])
				hot_spots[i][hidden] = true
				shown_spot_count = shown_spot_count - 1
			end
			SetWindowHeight()
		end
	end
  </send>
  </alias>
    <alias
   match="^repospots?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
WindowPosition(win, 0, 0, 12, 4)
  </send>
  </alias>
  <alias
   match="^reloadspots?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  define_spots()
  update_window()
  </send>
  </alias>
  <alias
   name="update_timer"
   match="^update ?timer$"
   enabled="n"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  update_spots()
  </send>
  </alias>
</aliases>
<timers>
  <timer name="tic" enabled="y" minute="0" second="1.00" offset_second="0.00"    send_to="12"
>
  <send>  
	update_window()
  </send>

  </timer>
</timers>


<!--  Script  -->


<script>
<![CDATA[
--------------------------------------------------------------------------------
--   HELP
--------------------------------------------------------------------------------
function spot_help()
Note("Spot_Timer ",(GetPluginInfo (GetPluginID (), 19))," by Zimbus, modified by Reva")
Note[[

Commands:

rs -- reset all spots to default
rs [spot] -- reset spot
rs [spot] [minutes] -- reset spot to a specific time

gspot -- posts spot times to group (astrisk denotes spot was up)
tmr [command] -- posts spots to whichever command, i.e. 'tmr chat' will chat them

sync [player with this plug-in] -- sync another player's timers

showspot [spot] -- toggles between showing and hiding a spot

repospots -- move window to center (in case you drag it off screen and can't get it back)

reloadspots -- reloads hot_spots table (in case of updates)]]
end

--GMCP room identifiers
RoomIDs = {
	--Shades, AM
    ["AMShades"] = { spot = "shades", city = "ankh-morpork", },	
	--H&E, AM
	["fa4381d90947481d6ff5cef86401bf3fdef08212"] = { spot = "h&e", city = "ankh_morpork", },
    ["caeb728c45742e180d206e36dd0d91246c032a8a"] = { spot = "h&e", city = "ankh_morpork", },
	--Cguards
    ["6f668a720914be85b0abb5da849e99749d7d0ea3"] = { spot = "cguards", city = "djelibeybi", },
    ["a410bc0ee4c3f9be0155dbd8c43bb981a7c565fa"] = { spot = "cguards", city = "djelibeybi", },
    ["315be737f8676ba7f88e07f533363220b7b42a7d"] = { spot = "cguards", city = "djelibeybi", },
    ["c4a83568847ea647ac1c8c0e9b1902a75ba9fde8"] = { spot = "cguards", city = "djelibeybi", },
    ["99d0b05a2e05e85aaadac3b01103b4d56f16d3ff"] = { spot = "cguards", city = "djelibeybi", },
    ["54f28609e71c7659798bc53278b24537bf67e345"] = { spot = "cguards", city = "djelibeybi", },
    ["2184c8419b7945b55d718ba87758cb10eb8287d9"] = { spot = "cguards", city = "djelibeybi", },
    ["05dac6937a0bb029440b25554f189cc4d66ee00f"] = { spot = "cguards", city = "djelibeybi", },
    ["d685c7a36794413cdf548c5ec21aad8088de1179"] = { spot = "cguards", city = "djelibeybi", },
    ["a410bc0ee4c3f9be0155dbd8c43bb981a7c565fa"] = { spot = "cguards", city = "djelibeybi", },
    ["90b91014b5d945a59187fc4b009216f7ced6196f"] = { spot = "cguards", city = "djelibeybi", },
    ["b61263a674e487126c3d79bf5002737ae86cffaf"] = { spot = "cguards", city = "djelibeybi", },
    ["b129e486e76dd0c648adf6b6d310b71dfbcc4bfb"] = { spot = "cguards", city = "djelibeybi", },
    ["ba78df0579a91e1d01f09179a162532b19c2aa06"] = { spot = "cguards", city = "djelibeybi", },
    ["e411366f3ff9c84b9cbb7ad75937b8f8aa562552"] = { spot = "cguards", city = "djelibeybi", },
    ["780b00a39490812ccfe170095fb62fa6f906c729"] = { spot = "cguards", city = "djelibeybi", },
    ["78ddf153482b6003e43388618e8f93564f1df1ff"] = { spot = "cguards", city = "djelibeybi", },
    ["acd9f4fa7aecea56479f3229bbbd0713daf6e14b"] = { spot = "cguards", city = "djelibeybi", },
    ["295051bd82708238e97b0c744e62792ed25b9778"] = { spot = "cguards", city = "djelibeybi", },
    ["f5390582884cc1def3c60a7250c36f9f6fbc81b6"] = { spot = "cguards", city = "djelibeybi", },
    ["95c3ee90edf97405fd8217936114203fe208ed6d"] = { spot = "cguards", city = "djelibeybi", },
    ["cd459b7506eb7f9b41c741d01b5eef91de0d6b93"] = { spot = "cguards", city = "djelibeybi", },
    ["285a65d776d3557788fa1c7d3a260b854878b67a"] = { spot = "cguards", city = "djelibeybi", },
    ["c3fb28c20095d4764d828d836d9d3c257b3deb4c"] = { spot = "cguards", city = "djelibeybi", },
	["76baaedd4b31bb7e666d3fd8c0ed1a72ac2f8a76"] = { spot = "cguards", city = "djelibeybi", },
	["5d70a146a4030594bc108f71f9d8fc78f6fabf2a"] = { spot = "cguards", city = "djelibeybi", },
	--Shaker
    ["cb8aaf1cc79bb5e8977a6d0124791dd116eef443"] = { spot = "shaker", city = "ankh_morpork", },
	--Flaming Cabbage
    ["cca9645565f2bb0d017ea9b1dcc9d1b3e9fcfe72"] = { spot = "cabbage", city = "ankh_morpork", },	
	--Gnu's
--    ["b1247526963ba323293be3d85c77dda0524b0c35"] = { spot = "gnus", city = "bes_pelargic", },	
	--Crocs
    ["70546ec71867645ab5c51e9ce6087b75dcf4176f"] = { spot = "crocs", city = "ephebe", },	
	--Medina
    ["BPMedina"] = { spot = "medina", city = "bes_pelargic", },	
	--Snail
    ["51d2e54cba38caa667e523bd5b735b841562265d"] = { spot = "snail", city = "bes_pelargic", },
    ["896bb970662fb4b34eae9f3a64772bee92f7081b"] = { spot = "snail", city = "bes_pelargic", },
    ["f512a4c3df5cfce4fabdc710508b36665b114752"] = { spot = "snail", city = "bes_pelargic", },
    ["8032556970f9edb90d048c02c0c42cfda00a0bc9"] = { spot = "snail", city = "bes_pelargic", },
    ["f512a4c3df5cfce4fabdc710508b36665b114752"] = { spot = "snail", city = "bes_pelargic", },
    ["d8573ca4a31a41d519c493a6b39566137e316a17"] = { spot = "snail", city = "bes_pelargic", },
    ["32aff1b15b696026a201fb62889da65ad253f029"] = { spot = "snail", city = "bes_pelargic", },
    ["86787be074a76e3e7c3974474f445645b1cae86f"] = { spot = "snail", city = "bes_pelargic", },
    ["32aff1b15b696026a201fb62889da65ad253f029"] = { spot = "snail", city = "bes_pelargic", },
    ["f564335ff63ceae37bac3e4ebb788152d4fc6114"] = { spot = "snail", city = "bes_pelargic", },
    ["32aff1b15b696026a201fb62889da65ad253f029"] = { spot = "snail", city = "bes_pelargic", },
    ["e51fb37129128552cf8c3c329f04c234ce3e3eb9"] = { spot = "snail", city = "bes_pelargic", },
    ["0631ed4d107f25764eb3b1de5ae3da2ac3f80c83"] = { spot = "snail", city = "bes_pelargic", },
    ["daf3b75b987d8516fc744dd4b43e3e7d6fe4172b"] = { spot = "snail", city = "bes_pelargic", },
    ["fc51a7f8a41b3639e1c38fded3369abb048b5690"] = { spot = "snail", city = "bes_pelargic", },
    ["ae0fd84d248cfca0abb4b9509bbcbd93a0db9c16"] = { spot = "snail", city = "bes_pelargic", },
    ["0140053262a1ad00fd33680e953ccce8e76bdcc7"] = { spot = "snail", city = "bes_pelargic", },
    ["255293f8382698d17016f22c08133ec7718d085a"] = { spot = "snail", city = "bes_pelargic", },
    ["a33a3f28adb8eccfe764508cfde10199e3d7a3b3"] = { spot = "snail", city = "bes_pelargic", },
    ["6256f4af986d38f52c6eeec8490b15364dcca4f8"] = { spot = "snail", city = "bes_pelargic", },
    ["ed877ca123ad45c40eb5688e5951cdd8dd4b62ce"] = { spot = "snail", city = "bes_pelargic", },
    ["a165bce29b3f4aa4d437f181635de8c4ac4b8e6d"] = { spot = "snail", city = "bes_pelargic", },
    ["c246c81b5dcd9d2658338ec09efdee72ec9a2d6d"] = { spot = "snail", city = "bes_pelargic", },
    ["c5e7b308e497cec097972e83f79c585390696213"] = { spot = "snail", city = "bes_pelargic", },
    ["332d9673f044de89777369035e70de70c86d0dd9"] = { spot = "snail", city = "bes_pelargic", },
    ["02954ba794941375e7c821956ed2762da2feb237"] = { spot = "snail", city = "bes_pelargic", },
    ["f255c95722d890b854ea47aad70a204a252b9b41"] = { spot = "snail", city = "bes_pelargic", },
    ["f0ecc2b0e5969fb542b08ca4d2821181c847f3c2"] = { spot = "snail", city = "bes_pelargic", },
    ["501805b9c6a691d5cf69f3066e2a2ff33f5eaea8"] = { spot = "snail", city = "bes_pelargic", },
    ["febf20a0847c00f9d7f1fd12834517bb22dcbf4a"] = { spot = "snail", city = "bes_pelargic", },
    ["475911910fd731946bf67af4d379835188444b3c"] = { spot = "snail", city = "bes_pelargic", },
    ["a485bb55fa9e9c90843258c915f1a803fc4be596"] = { spot = "snail", city = "bes_pelargic", },
    ["ab852c2eeadc1ff623d01d17a4fd453f6bf1e95a"] = { spot = "snail", city = "bes_pelargic", },
    ["5d2da42534fa5d8d65c69f9b0aaac06fe2bcc063"] = { spot = "snail", city = "bes_pelargic", },
    ["b5cb9ef87ad9051b423c17438e6a848f7fc492e8"] = { spot = "snail", city = "bes_pelargic", },
    ["184cae38cfb5584827d33a2e9ee053f0789987f2"] = { spot = "snail", city = "bes_pelargic", },
    ["d3a5296feb2e3496f44d93dd173ad9ec440938a0"] = { spot = "snail", city = "bes_pelargic", },
    ["8029e603ff702c0ee25ef5ffda57656318253a18"] = { spot = "snail", city = "bes_pelargic", },
    ["ee2c6b203b554fbed02c4361c313064de5dd1e2c"] = { spot = "snail", city = "bes_pelargic", },
    ["116f211f7b0ca4232f14de165a5cbd63c8fbfe40"] = { spot = "snail", city = "bes_pelargic", },
    ["7e04aae777f2b0c2800fe0d9c56fda567e434559"] = { spot = "snail", city = "bes_pelargic", },
    ["b07fe2158e9ff237bb1f0879356a73a3e9770927"] = { spot = "snail", city = "bes_pelargic", },
    ["f868b563b47793f11298e65c66e073bac7889292"] = { spot = "snail", city = "bes_pelargic", },
    ["93ef649447a16088e9d0445b7160926a62a447ed"] = { spot = "snail", city = "bes_pelargic", },
    ["00340668354a3e78970871913542318703328941"] = { spot = "snail", city = "bes_pelargic", },	
	--Black Market, BP
    ["982e809a23be69f5bcb0aba65e9f0b31da73e806"] = { spot = "bmarket", city = "bes_pelargic", },
    ["31d5891d6494cca3befb355bc63be0810ce50d40"] = { spot = "bmarket", city = "bes_pelargic", },
    ["b5a9944c6e264eb959d36ed02f6907322f6399c8"] = { spot = "bmarket", city = "bes_pelargic", },
    ["e3aa6ddd99d95e39b93795bfbde3e66b73a0d02a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["e9f65119ec8acc822a8efb47d4146ee7fa924b4a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["639c815db46cbcf8d443bdb783dd10f33fad8f49"] = { spot = "bmarket", city = "bes_pelargic", },
    ["9374012a1e06e9cdb09819550abdbc13e8010995"] = { spot = "bmarket", city = "bes_pelargic", },
    ["263ea81beb12329ee2ff24f65e9ba95cc94a95c6"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c5107347eeb67b3d0fdee7191b08a804a91602e3"] = { spot = "bmarket", city = "bes_pelargic", },
    ["dc95424a18d18ecca90d95bfa1cc8217b1ddfa83"] = { spot = "bmarket", city = "bes_pelargic", },
    ["caa9cb5be05e011bb3765425e496af5ba177e3d0"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c7c6f5720d2c587f80696b6f0ec7f9ac0f084b06"] = { spot = "bmarket", city = "bes_pelargic", },
    ["d62816ce9950dffe6bafca3f40d40d61433cc97e"] = { spot = "bmarket", city = "bes_pelargic", },
    ["bf170d49dd81b1e0f3c44c085b5bd390a08172f3"] = { spot = "bmarket", city = "bes_pelargic", },
    ["9588161445f5a90547bde8158c0e4ba02ba132c8"] = { spot = "bmarket", city = "bes_pelargic", },
    ["41278c32e9de6c04e7a65b510689ce4d95387a24"] = { spot = "bmarket", city = "bes_pelargic", },
    ["b057e66c03d0deaa77992ad1e6a178a586a8953d"] = { spot = "bmarket", city = "bes_pelargic", },
    ["a1e69a1a20c87d5e1640b79c1d026a6b75404f6b"] = { spot = "bmarket", city = "bes_pelargic", },
    ["0ae9d8c4f2b48f4fcc4cb57fd85443399be2ecc5"] = { spot = "bmarket", city = "bes_pelargic", },
    ["9bfac54bbc89da35556960180a410e060a479ed2"] = { spot = "bmarket", city = "bes_pelargic", },
    ["e4646eab906aef1187a9dd3e980441b8f6b8d68c"] = { spot = "bmarket", city = "bes_pelargic", },
    ["98857585e5b0c25aad787f4a814e72b9a07008a9"] = { spot = "bmarket", city = "bes_pelargic", },
    ["f6c60dd36ed38707eb954c3a670f2f9370a79399"] = { spot = "bmarket", city = "bes_pelargic", },
    ["2ad3b14d9c39254b67ec6cb0003131eac4cccf3e"] = { spot = "bmarket", city = "bes_pelargic", },
    ["730753618119e17ed7fbe7a5303f65e774657a76"] = { spot = "bmarket", city = "bes_pelargic", },
    ["9f2c3ba13978e38041a7f411503d402b6b4b1ef8"] = { spot = "bmarket", city = "bes_pelargic", },
    ["4377f4ffe153460d7e9ce4766b83911d873b4824"] = { spot = "bmarket", city = "bes_pelargic", },
    ["67a5023068111bb587aa48b66391c5d1bba42f5b"] = { spot = "bmarket", city = "bes_pelargic", },
    ["b36800b505142c34b6a59e3d353dc23bb6387b75"] = { spot = "bmarket", city = "bes_pelargic", },
    ["d58ab6e4ed962203abc0427db50ddc81949bb88c"] = { spot = "bmarket", city = "bes_pelargic", },
    ["84e8e1d41101c9240faef458c85fb625526020d4"] = { spot = "bmarket", city = "bes_pelargic", },
    ["d5d67fc2e1e936a040cffb600bb9972add4e52a5"] = { spot = "bmarket", city = "bes_pelargic", },
    ["7acb877a5e00d27b548a19f0a90fea5b26a5140f"] = { spot = "bmarket", city = "bes_pelargic", },
    ["8654296946a63ab5dfe63e1e156af6ce4c191fd4"] = { spot = "bmarket", city = "bes_pelargic", },
    ["6c367a8d2c37a2cdd64d9b5c278ff106f418fdca"] = { spot = "bmarket", city = "bes_pelargic", },
    ["d58bd56e91f015e41fdde8da5efc7229068f47e6"] = { spot = "bmarket", city = "bes_pelargic", },
    ["cf98f69e09a9801175ec07e9c369bda97f1eb81a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["e243e9430cbad4877cd4a4e4c318d9b968abb7bc"] = { spot = "bmarket", city = "bes_pelargic", },
    ["53bb75fa7486f044bd386cd82ac60162d0ac8183"] = { spot = "bmarket", city = "bes_pelargic", },
    ["435bb313d903985d89324cd8cdbba8068487b2a6"] = { spot = "bmarket", city = "bes_pelargic", },
    ["6b55b93d3c02e040b6e9664790ccf0feda00a971"] = { spot = "bmarket", city = "bes_pelargic", },
    ["69c367485a2f91b38ab1cfb816ac27cd1bf3c380"] = { spot = "bmarket", city = "bes_pelargic", },
    ["1d39e3a56eb8a09ee8f30c470ce5e45e54fa3c64"] = { spot = "bmarket", city = "bes_pelargic", },
    ["025c8fb7331f0b00769c9d413c399600bc8fde49"] = { spot = "bmarket", city = "bes_pelargic", },
    ["1e3ae1ba6943a564aae49d57a42309079406fd07"] = { spot = "bmarket", city = "bes_pelargic", },
    ["528230fc8ceb051de4f9c74050c29026ce0fe055"] = { spot = "bmarket", city = "bes_pelargic", },
    ["0238a6d87503d207d821e18f76f224d0a7659828"] = { spot = "bmarket", city = "bes_pelargic", },
    ["4fc09542c1022fbe2b338f4cd61e8e5c1c4fb059"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c6b9247373df384e09820448fbb30fc0b03406a3"] = { spot = "bmarket", city = "bes_pelargic", },
    ["2d13f3b060588de14211a94139f5301f3c274d1a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["69c03124007c140469f3fc26753ccc23bc740c44"] = { spot = "bmarket", city = "bes_pelargic", },
    ["1cda9f3901bcaf3d104ddfade765a9aef69a2d60"] = { spot = "bmarket", city = "bes_pelargic", },
    ["e4cdd8e544188af7bcf02d6aa97a8b1be536b307"] = { spot = "bmarket", city = "bes_pelargic", },
    ["4dcb6bf88f306c2dc0c1e22677373d04552bab7a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["003f72baae4e13372e6217e2b32891a743ba750e"] = { spot = "bmarket", city = "bes_pelargic", },
    ["dae754ba34a7b166ff823de8262b390293edd79a"] = { spot = "bmarket", city = "bes_pelargic", },
    ["5b32c224783d165a12609971712a2318450ba3a9"] = { spot = "bmarket", city = "bes_pelargic", },
    ["3b6f4b9504332ee1ccdf3ff1d01eb43aac3e1148"] = { spot = "bmarket", city = "bes_pelargic", },
    ["633e4a166d6c3ec2bddb49f7a715b6b295bd2e18"] = { spot = "bmarket", city = "bes_pelargic", },
    ["87d410ca8290b97848c27d6d50d69547a044813f"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c35aabd302e8bb46d6a9d6f7fbb5068022e097f9"] = { spot = "bmarket", city = "bes_pelargic", },
    ["77ce87035bef86def761b72a11ababa9c48f314c"] = { spot = "bmarket", city = "bes_pelargic", },
    ["94f4b3902fe0f4bdfc42e7018a71d7134482dbbe"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c66fc58c1c269a5c8d8de6793dd9b15095b14787"] = { spot = "bmarket", city = "bes_pelargic", },
    ["840f44965836a66cfac9932e1a582cc6fb925170"] = { spot = "bmarket", city = "bes_pelargic", },
    ["9e822bf44096bc8f2db57fc0cba5f73ea2ecb0a5"] = { spot = "bmarket", city = "bes_pelargic", },
    ["c0829789c60e8bfcbb6ab6ecb667a59c8decefee"] = { spot = "bmarket", city = "bes_pelargic", },
    ["73ee4137af30a761ea3456d88d30741edcdc507f"] = { spot = "bmarket", city = "bes_pelargic", },
    ["f1d87d47acb65d172469afb0d3ce806653501ac6"] = { spot = "bmarket", city = "bes_pelargic", },
    ["fd6ad333b5c9261e58782724fa21ab3b7f4c3f9c"] = { spot = "bmarket", city = "bes_pelargic", },
    ["bc627ccfb2408f6e0bc2a0b1d3a159d92d05ce58"] = { spot = "bmarket", city = "bes_pelargic", },	
	--Cat's Tail, BP
    ["eddf3f38a75087a21bab11da5f5bf4c9b118caaf"] = { spot = "cats", city = "bes_pelargic", },
    ["00f31b83219fd63f94a9560e944459b319a3f535"] = { spot = "cats", city = "bes_pelargic", },
    ["14006b325ea74e3ef05a28907d4409370dba259c"] = { spot = "cats", city = "bes_pelargic", },
    ["87979abed8518a32542192b61d67df1c548516e8"] = { spot = "cats", city = "bes_pelargic", },
    ["ca78f624f7f08fd860d7509ee12af7d21bb3fc53"] = { spot = "cats", city = "bes_pelargic", },
    ["06640e9779fe1bed1fa19e20366ba24449dd3f43"] = { spot = "cats", city = "bes_pelargic", },
    ["f7b8930ddbef2681555fda71cf202524642de19e"] = { spot = "cats", city = "bes_pelargic", },
    ["8d0287e3d57718dabdc4fdc08fd65dbb9ffec345"] = { spot = "cats", city = "bes_pelargic", },
    ["47af19ff10f3967835686a9c7a7c3b4834a638a6"] = { spot = "cats", city = "bes_pelargic", },
    ["e6f803564467c560bc86646b2d366d8e0bcc1c8c"] = { spot = "cats", city = "bes_pelargic", },
    ["d703576c8b2ccab6d77e5fde3bc65793b85487c1"] = { spot = "cats", city = "bes_pelargic", },
    ["0aa00b042405b80c5cfac781ceb422973e10711b"] = { spot = "cats", city = "bes_pelargic", },
    ["0ecbae2883c7931bdaeb954f7025861b10a76aea"] = { spot = "cats", city = "bes_pelargic", },
    ["4f52536d369b9350ee3247b894b50cb2e0a725cd"] = { spot = "cats", city = "bes_pelargic", },	
	--Dragon's Head Square, BP
    ["ee4fecd66b1cbb51b3ee4bc1b5ddac6a7619a304"] = { spot = "dhs", city = "bes_pelargic", },
    ["7a37d20e0fc4e239118a5c7de3ed549b9154dffe"] = { spot = "dhs", city = "bes_pelargic", },
    ["8ebe9fd91d8be31dc30bb3aa9a48f080c2502ff6"] = { spot = "dhs", city = "bes_pelargic", },
    ["5a869f14e9a03d4e9de4e25e6039b7ccf204ffe7"] = { spot = "dhs", city = "bes_pelargic", },
    ["efd63c7bdad29bb886fabb80e0aced946447a923"] = { spot = "dhs", city = "bes_pelargic", },
    ["8ae59c524d62198a5ef6f40835fd0a313b4febf1"] = { spot = "dhs", city = "bes_pelargic", },
    ["bb9f1bccccd4deb9573ba722de037111cd9ebf1a"] = { spot = "dhs", city = "bes_pelargic", },
    ["630e4b3d14ede14485431e5aab55b9b57c1d7018"] = { spot = "dhs", city = "bes_pelargic", },
    ["e092eec0f76c313375bfcba8ef0634d938a6c594"] = { spot = "dhs", city = "bes_pelargic", },
    ["606ca88cd16a43e2bc49f6f045be5ac614160565"] = { spot = "dhs", city = "bes_pelargic", },
    ["5bbc7c0a6897adf5e8b02469148a683d0322957b"] = { spot = "dhs", city = "bes_pelargic", },
    ["e8dd0151cfc5b377b02ceb6d84527ea408bb2f47"] = { spot = "dhs", city = "bes_pelargic", },
    ["c9253fe3da8d14830702f02fe16fdcc23fb3bc6e"] = { spot = "dhs", city = "bes_pelargic", },
    ["2062ea63469320e9b9546f2b6642f7bb8062ccc9"] = { spot = "dhs", city = "bes_pelargic", },
    ["7516a5ad037c09b2375548a3cf888ca4c65f681e"] = { spot = "dhs", city = "bes_pelargic", },
    ["9cf72d48bde8170c4f19e6fe59e7d83b360ad175"] = { spot = "dhs", city = "bes_pelargic", },
    ["74aa2ba30c63a1ac835762a0264b1d45a7d7323e"] = { spot = "dhs", city = "bes_pelargic", },
    ["2950a174f65ef8e38eee444295c9b4832d36ab60"] = { spot = "dhs", city = "bes_pelargic", },
    ["9cdc3ae97e2ac72182568bc3d6e6bf41ff46198b"] = { spot = "dhs", city = "bes_pelargic", },
    ["b9ae25934a36200bfb60372a9621b5f45b36cf62"] = { spot = "dhs", city = "bes_pelargic", },
    ["d024de09014fc39e6b130d7fa48d31f38d6da44a"] = { spot = "dhs", city = "bes_pelargic", },
    ["b630eaab10da582d6e68821eaa1deb3dba9c11f3"] = { spot = "dhs", city = "bes_pelargic", },		
	--Zoon Liar
    ["28a6cac4941a5c2035d9a5394d9b84b38731f2ec"] = { spot = "liar", city = "ohulan_cutash", },
	--Thousand Parades, BP
    ["3862c5fd0fe83f4080bdb9b94519bf8da89d5015"] = { spot = "parades", city = "bes_pelargic", },
    ["bfd9a46f2d92d56901814d00a9c3523053ece606"] = { spot = "parades", city = "bes_pelargic", },
    ["6c6e41001ecd193e7281839d99b4c281ee0f897f"] = { spot = "parades", city = "bes_pelargic", },
    ["7af9d2df1b733aa0543e3ced6f869504dcbe93df"] = { spot = "parades", city = "bes_pelargic", },
    ["6ca76db210c7101f4fd0eeba853f57b212731abf"] = { spot = "parades", city = "bes_pelargic", },
    ["35696de1c035494099961b4155ddff479340008c"] = { spot = "parades", city = "bes_pelargic", },
    ["79713b4ca3d99f832f3caf58d90c85c244b260d4"] = { spot = "parades", city = "bes_pelargic", },
    ["0386e4feb14287613807a3975bcf1af2818c6818"] = { spot = "parades", city = "bes_pelargic", },
    ["5a471316a9f01861444c6e4d9ec057eeae608657"] = { spot = "parades", city = "bes_pelargic", },
    ["f86d7ab9c53b5c1c7de3226ed5c3f7d05ea6b7ed"] = { spot = "parades", city = "bes_pelargic", },
    ["1601ed6d1b3e6bfcaaa5791cce74fe612eaca60d"] = { spot = "parades", city = "bes_pelargic", },
    ["7eacc75e3e626fe0482a0d07d228aaf1871295d5"] = { spot = "parades", city = "bes_pelargic", },
    ["6b4d27767423fb0d29c8ef8aa8664980f029942f"] = { spot = "parades", city = "bes_pelargic", },
    ["76fb400b92d8370e5187aab710362126b4b1eda0"] = { spot = "parades", city = "bes_pelargic", },
    ["0dfd2154b1a1a5f492e2fd8e12814559f4452de8"] = { spot = "parades", city = "bes_pelargic", },
    ["c43ca6c7fa542d2c8bd06685578b02d6302c1fb8"] = { spot = "parades", city = "bes_pelargic", },
    ["bbec1d1d952c6d36559e27d7996affa3c3529af6"] = { spot = "parades", city = "bes_pelargic", },
    ["87910088fc95e65f43cd95046fc34313cf2922a1"] = { spot = "parades", city = "bes_pelargic", },
    ["a802341d42ab2f3e8a0551b155ce3d274d804386"] = { spot = "parades", city = "bes_pelargic", },
    ["a7ff939a3775cb0e9f2c7ec34446a711c21f23b3"] = { spot = "parades", city = "bes_pelargic", },
    ["dcdcedfd38275915db00f8dea416276829e5ab58"] = { spot = "parades", city = "bes_pelargic", },
    ["d131fb9a9d2ab605d4a94e8acd07283f0c7043bd"] = { spot = "parades", city = "bes_pelargic", },
    ["1c059b6d8431ab02cf1d321edc65803926ebedfb"] = { spot = "parades", city = "bes_pelargic", },
    ["a14dff65c90f5224ea0cdb1bb20483c2220cb733"] = { spot = "parades", city = "bes_pelargic", },
    ["686842f0e6574e07834fdf9e76c4530cc5aad9ea"] = { spot = "parades", city = "bes_pelargic", },
    ["5ea43c33c1f2b69076028489dcda7764d29a4de4"] = { spot = "parades", city = "bes_pelargic", },
    ["a2e58e019e725fbde002dfc1f374dc2e24ab81c8"] = { spot = "parades", city = "bes_pelargic", },
    ["5934d316fe1683c2f07b68c12a24e38b52cdcfb2"] = { spot = "parades", city = "bes_pelargic", },
    ["afe7bb3e7a6da51f8853dabe80a616d0cb969ce9"] = { spot = "parades", city = "bes_pelargic", },
    ["5aa0ad1f8b1da33ec2238b7f7dc0d9626c581a72"] = { spot = "parades", city = "bes_pelargic", },
    ["5c85e502d046f725eaa9b5b8ce06bc271d8961e2"] = { spot = "parades", city = "bes_pelargic", },
    ["c333ce23e183164992fb0023dd08eb85fc8f7822"] = { spot = "parades", city = "bes_pelargic", },
    ["f5dd0ec08b4a36ea9c0c4b6da6ed63efa36dd1ef"] = { spot = "parades", city = "bes_pelargic", },
    ["885c74a09acf91844e41936ffcf2550f48c34a90"] = { spot = "parades", city = "bes_pelargic", },
    ["95ede200c782fdb09239a2db85dd9f8775922f86"] = { spot = "parades", city = "bes_pelargic", },
	--Dojo, BP
    ["62c1d0d4a3449a4db14dc64554fecb13f663ad03"] = { spot = "dojo", city = "bes_pelargic", },
    ["f80561834fb101d794b574ef5009e689f55f9f45"] = { spot = "dojo", city = "bes_pelargic", },
    ["6139cc42dc377c1bda38128091c7a1cbfd3d2746"] = { spot = "dojo", city = "bes_pelargic", },
    ["b25bbca7ab1a3e9757c3af0816d67253f48ab2d9"] = { spot = "dojo", city = "bes_pelargic", },
    ["08552763702451e904ae42433f2e600a2d071c3e"] = { spot = "dojo", city = "bes_pelargic", },
    ["712f5f81b258e5edc211784051749cb3f100041d"] = { spot = "dojo", city = "bes_pelargic", },
    ["e45feb1e8fa6f95375489ff8990f03c1cc2e90e7"] = { spot = "dojo", city = "bes_pelargic", },
    ["46be4e1a8acee71dd1a219f922f0336959aa2bc8"] = { spot = "dojo", city = "bes_pelargic", },
    ["adef8379d080af980955bc50fc9c7ec8647ade18"] = { spot = "dojo", city = "bes_pelargic", },
	--Smugglers, Ephebe
    ["ebff897af2b8bb6800a9a8636143099d0714be07"] = { spot = "smugs", city = "ephebe", },
    ["c0495c993b8ba463e6b3008a88f962ae28084582"] = { spot = "smugs", city = "ephebe", },
    ["501c0b35601b8649c57bb98b8a1d6c2d1f1cea02"] = { spot = "smugs", city = "ephebe", },
    ["8c022638ba642395094bc4dc7ba0a3aaf64c02c1"] = { spot = "smugs", city = "ephebe", },
    ["898b33dcc8da01ef21b064f66062ea2f89235f5f"] = { spot = "smugs", city = "ephebe", },
    ["0b43758d635f631d46b1a1f041fd651e446856ca"] = { spot = "smugs", city = "ephebe", },
    ["1793722d05f49d48f28ce3a49e8b97d59158b916"] = { spot = "smugs", city = "ephebe", },
    ["e28d07530ae163f93ade722c780ce897a4e93a15"] = { spot = "smugs", city = "ephebe", },
    ["a184520b84e948f89e621ab50a500c47faefa920"] = { spot = "smugs", city = "ephebe", },
    ["8048df6be9b61c0f49e988924185ce937a38814b"] = { spot = "smugs", city = "ephebe", },
    ["f026140904d9f0c910b4975b937b20189f225605"] = { spot = "smugs", city = "ephebe", },
    ["952786ea48134ac3505cbabb6567ef35fad13af8"] = { spot = "smugs", city = "ephebe", },
    ["b9bb8741399c7bdf6836cb06148c2e7c4f033853"] = { spot = "smugs", city = "ephebe", },
    ["0663269ccae61f6b313cb378213c74131b394fbc"] = { spot = "smugs", city = "ephebe", },
    ["03a3ca540e9c7fc9dfa914d213b974a0b207f596"] = { spot = "smugs", city = "ephebe", },
    ["3fedc83188999bd20733ba77f02409aee8011127"] = { spot = "smugs", city = "ephebe", },
    ["033906622a542f9e0550608b86932dff52d7e8c2"] = { spot = "smugs", city = "ephebe", },
    ["6ef15a8643f1515f8a96fb646dd8e2ab80bade15"] = { spot = "smugs", city = "ephebe", },
    ["ddabfb40040805889125b223a2d679e0a9716fd2"] = { spot = "smugs", city = "ephebe", },
    ["468f6243998bda671161e6afe079ff5fac866fc1"] = { spot = "smugs", city = "ephebe", },
    ["16a0b8c39025147f9f87cf860b76380af6c9e1d4"] = { spot = "smugs", city = "ephebe", },
    ["4e6aef2cd732fb35c2c110d768605f4aa56194af"] = { spot = "smugs", city = "ephebe", },
    ["a9734849233e5f97fd676676a9853b22b0cb22e8"] = { spot = "smugs", city = "ephebe", },
    ["d57af869e7ff7abe31ceb1245ccbc6d47df49b7b"] = { spot = "smugs", city = "ephebe", },
    ["372dd28add7bfc7ed26f4da4047a501afcf24696"] = { spot = "smugs", city = "ephebe", },
	--Smugglers Hidden Room
    ["886a1404021cdfb21668823aa0ab2cefd05fbcd1"] = { spot = "smugs", city = "ephebe", },	
	--Cits, Ephebe
	--E
    ["4064c938b803bb0993333733ceb240c0fc4116e1"] = { spot = "cits", city = "ephebe", },	
	--NE
    ["f4949e23d9ae05eb9b104ea3aa99630e2dc095be"] = { spot = "cits", city = "ephebe", },	
	--SW
    ["bad3702c30c3e459578d4e400abac17fd4942e07"] = { spot = "cits", city = "ephebe", },	
	--SE
    ["60d87a8ee563cf35cd4e06e0a7bba6eb9ef2f4ad"] = { spot = "cits", city = "ephebe", },	
	--W
    ["491e3c18a0882a65e38c591f808bd423e29147d2"] = { spot = "cits", city = "ephebe", },	
	--NW
    ["64f456ea905d9ea7c0b0caf841c2f3771b075955"] = { spot = "cits", city = "ephebe", },	
	--Casino, Genua
    ["081bb9e8862a6ac8e483643a54676ce2e85125b2"] = { spot = "casino", city = "genua", },
    ["8357512e66bfacc2447da77a7274f006b1118853"] = { spot = "casino", city = "genua", },
    ["8b7eefa4c958d0ff05029fe390d772ad42b3c1c4"] = { spot = "casino", city = "genua", },
    ["e9a4b7457be59438fbbfc44559e70a97c106f62c"] = { spot = "casino", city = "genua", },
    ["6c5e875f8b49220f2fe71fd59871ac418c7169aa"] = { spot = "casino", city = "genua", },
    ["d84d44aaa9bd513fe0508b26deb5df4a00c53f0a"] = { spot = "casino", city = "genua", },
    ["11f3c9c2ccc3c66cdcaaad2a44854531275ccc52"] = { spot = "casino", city = "genua", },
    ["2728c33f0ce86c4c14bdb25962a8a9ab2d500d61"] = { spot = "casino", city = "genua", },
    ["29b5391bc5933e9fbfe3b8074ebd94cad6eed287"] = { spot = "casino", city = "genua", },
    ["6c8e158e950a0407e3b41ef1e37aff82235bf0c4"] = { spot = "casino", city = "genua", },
    ["fe497c134a984bea59a9fc3ed48e49f162c7a76f"] = { spot = "casino", city = "genua", },
    ["9f2f940507f60ead3a0d49a82363e40c8db6ead3"] = { spot = "casino", city = "genua", },
    ["973b997211696d4725ea15cc23474d13429e545d"] = { spot = "casino", city = "genua", },
    ["5ace57950e0474d19599cd29ac500daa47cbfdb6"] = { spot = "casino", city = "genua", },
    ["34e8ca833ae1daf9f42da4a9023bad45dababd6d"] = { spot = "casino", city = "genua", },
    ["3bc1cfe43bbccf2b5e4571965443411053fbd1f3"] = { spot = "casino", city = "genua", },
    ["f7409765bf859c4ead6061dbddebc2d89f41d89a"] = { spot = "casino", city = "genua", },
    ["31a2cf68c58644c05b46730186e3e33e15a14424"] = { spot = "casino", city = "genua", },
    ["8b8c7a502d1443c866fa26a3ad4e0cb8807b2272"] = { spot = "casino", city = "genua", },
    ["0708544a3741005b33e0c2c9b8b3d6e80bbb8607"] = { spot = "casino", city = "genua", },
    ["1113cc5bec6b77e40992ccf94968106ae473f960"] = { spot = "casino", city = "genua", },
    ["7a5800e6ab775942048fd6c01b63e5cdc2bb3804"] = { spot = "casino", city = "genua", },
    ["ae2461dcbeb6374d6e9b344b2f8153d09e874aff"] = { spot = "casino", city = "genua", },
    ["d572da8982764dd019315e09c4fc75b93bbf0bf6"] = { spot = "casino", city = "genua", },	
	--Stables, Genua
    ["77e943d49de7348fdef7c49bfcc05427af22d739"] = { spot = "stables", city = "genua", },
    ["70bf1dd2c838b6b018f76886832c161c66495813"] = { spot = "stables", city = "genua", },
    ["62603b86954ab72c73d48dc95fb74d71cbdc7608"] = { spot = "stables", city = "genua", },
    ["0718929d8b608454f33d0bcb66b48d22caf4be8c"] = { spot = "stables", city = "genua", },
    ["6919307c65d0bdb432a2f02689447006decefcf8"] = { spot = "stables", city = "genua", },
    ["aeb7458ea6687042e3583984fba9669928159b91"] = { spot = "stables", city = "genua", },
    ["09451b54e0d98a60c52ab9fdccdb7370c383c0b1"] = { spot = "stables", city = "genua", },
    ["42d54db8308754b3c65390ed5471417ec77f04db"] = { spot = "stables", city = "genua", },
    ["8ce99945e33380d22cb63199afe67d7fdfce40f1"] = { spot = "stables", city = "genua", },
    ["745f5594d43e94c782141c67b73fe02365d2eca4"] = { spot = "stables", city = "genua", },	
	--Pizza, Genua
    ["9d801d155ff155b7134ebf5eeb8c73117563da56"] = { spot = "pizza", city = "genua", },
    ["82129d6537efab6e0ff30cdb97b2729d23642b3f"] = { spot = "pizza", city = "genua", },
    ["ae9c75c25087146424d62b4e7a497fe3e8a70be2"] = { spot = "pizza", city = "genua", },
    ["babb4de327cd0e604e5368a82219b00772195e68"] = { spot = "pizza", city = "genua", },
    ["41a9038660df9a36f11513d865212f6a1d176853"] = { spot = "pizza", city = "genua", },
    ["c28bf5e86ee23fbb8fb8d58fbb4df6a16c8f5645"] = { spot = "pizza", city = "genua", },
    ["2c758323585123f62deca8a3bcdb4e56e377a6a0"] = { spot = "pizza", city = "genua", },
    ["335be77d5d88cf6e09bf91d527400be70f0b8a0c"] = { spot = "pizza", city = "genua", },
    ["84534472f7d603c1b8e63b4ededb13e7e13d5161"] = { spot = "pizza", city = "genua", },	
	--Genua Docks, Genua
    ["a7fc011cd1ffea820a2c08bbbd0c2ace6bf64ad0"] = { spot = "docks", city = "genua", },
    ["9b4a9426e0f00de862629b5da80e838ef2b84575"] = { spot = "docks", city = "genua", },
    ["199b1901e9501a0592bac3161a56ee45de8f708f"] = { spot = "docks", city = "genua", },
    ["9c7dd450ba6a9abde0b4c1fa1c08ac1b5a282646"] = { spot = "docks", city = "genua", },
    ["f405e68a3fdbdce49e34d0d8ee2649b978e8c284"] = { spot = "docks", city = "genua", },
    ["8a35796b404aaac8efa1383c2d677f431aec1bac"] = { spot = "docks", city = "genua", },
    ["fba03ad3c3ba0f0aa733d3cd2896e263b487513b"] = { spot = "docks", city = "genua", },
    ["08ec5469c448546cd2d4696a4ddb24c5f3d12301"] = { spot = "docks", city = "genua", },
    ["6fad6eef354b698e964af18d55cd4f8a04b7cc0b"] = { spot = "docks", city = "genua", },
    ["644040e74ea31f6ad5483726f433dbc81869b890"] = { spot = "docks", city = "genua", },
    ["247f6a1f87f04977943002cf5e9f043543d7babb"] = { spot = "docks", city = "genua", },
    ["d99c5f2d218294f58661cb0140884f74f1476a1a"] = { spot = "docks", city = "genua", },
    ["71cd7e99a75818dff1558a85239ec6e1c6ea72b6"] = { spot = "docks", city = "genua", },
    ["f8f9e4072a9506d20f0b97ba693eff18d7473ca9"] = { spot = "docks", city = "genua", },
    ["8b2ae200870a0d34f485f53923700a3d13495d70"] = { spot = "docks", city = "genua", },
    ["2da07cf469da71b21cc6527f1f1cffaef16877e4"] = { spot = "docks", city = "genua", },
    ["e2791e8a19d520d7475d11bd27da48dbc8eaf141"] = { spot = "docks", city = "genua", },
    ["80e8a0b95c58f2feca955219084739e32696da48"] = { spot = "docks", city = "genua", },
    ["48ee31fd5d78131b0a2195c81e39cc66a56db405"] = { spot = "docks", city = "genua", },
    ["e66191b63769c9d1719883df7eb08912618982b5"] = { spot = "docks", city = "genua", },	
	--Giants, Ramtops
    ["a3c7efad1e05b64f673ac0ea996cd383157241bf"] = { spot = "giants", city = "ramtops", },
    ["42cdaf35ab2cbf0d43899203b7f96f141dd68ef1"] = { spot = "giants", city = "ramtops", },
    ["2accfe93cf2daddad4b4c5dde8d2c09951938d5e"] = { spot = "giants", city = "ramtops", },
    ["a38df4871cd821a37c6cd514a5c84486747d77f9"] = { spot = "giants", city = "ramtops", },
    ["4df97d469d5d3ad097fb6e06b122f96521557387"] = { spot = "giants", city = "ramtops", },
    ["8cb5e2c6c0ac116cfe69cfefa73a035ad9ea9ec7"] = { spot = "giants", city = "ramtops", },	
	--Grflx Lower, Skund Forest
    ["890966c6b2b690fc1b04749a7bf9d04eca29dcec"] = { spot = "grflx", city = "skund_forest", },
    ["e2817d1202329e6b28a62e186e95e53f07657c5e"] = { spot = "grflx", city = "skund_forest", },
    ["a914b6c578b073a83ab576d2a94d2189cbfedb6f"] = { spot = "grflx", city = "skund_forest", },
    ["f5cb49ea1b91109f23a450e5ee3fcea0fa1cc35d"] = { spot = "grflx", city = "skund_forest", },
    ["24ed39fb0af9cd0da4b980dc2a56de999f45fae6"] = { spot = "grflx", city = "skund_forest", },
    ["0eaedb668455879efeefa4b233646d77e8c4d500"] = { spot = "grflx", city = "skund_forest", },
    ["d278929fb3f77b719ffdaefbfe9a3c7c65778696"] = { spot = "grflx", city = "skund_forest", },
    ["27b31ffd3a4b358080d8d6c48187e8fc9ec1a4e0"] = { spot = "grflx", city = "skund_forest", },
    ["e08f754768a1e3de26fbdffdb6451bbe4d79d989"] = { spot = "grflx", city = "skund_forest", },
    ["7021e3ec65c6c5cd9952f3a97e9da42e9d081567"] = { spot = "grflx", city = "skund_forest", },
    ["eeef74a2b069cd43ed3358391fbccc954f0a281e"] = { spot = "grflx", city = "skund_forest", },
    ["006d978ac31bc76d2901a1902168cc5e643fe8c9"] = { spot = "grflx", city = "skund_forest", },
    ["45f563cddce6573cddc820dc8af80f9d36c2aadf"] = { spot = "grflx", city = "skund_forest", },
    ["809191f8dfa16df24fe6a9d96d999a6e0136d32a"] = { spot = "grflx", city = "skund_forest", },
    ["8e86aac23bf2d05f0c415ef24bb201dfe4cb7023"] = { spot = "grflx", city = "skund_forest", },
    ["555b1f574260beeb4d9ab35db3c0323dd02dc9a4"] = { spot = "grflx", city = "skund_forest", },
    ["d65e21333f1a4e138f6c456e85d56fa47239be44"] = { spot = "grflx", city = "skund_forest", },
    ["af52cb6ddffa2330607ab239b8b0aa57fd4ebbc9"] = { spot = "grflx", city = "skund_forest", },
    ["0b64f86efb205055d85f9f0336ba179ab8065865"] = { spot = "grflx", city = "skund_forest", },
    ["6be56e360894c4341f79bd5caddc540561022dd2"] = { spot = "grflx", city = "skund_forest", },
    ["c6ef0568ecd799196d77836352d0f3dfbccf168d"] = { spot = "grflx", city = "skund_forest", },
    ["98131c7d5803c27611ff2a8dcd3697127b56ba96"] = { spot = "grflx", city = "skund_forest", },
    ["e1e0afc2c65970ca67602f8349d8b37f96e0c17e"] = { spot = "grflx", city = "skund_forest", },
    ["d5d76101137d8926cd2f2eaef6b1c4b1239b238e"] = { spot = "grflx", city = "skund_forest", },
    ["255480501cab2282f57d1f8b36020fbf8de0d1e4"] = { spot = "grflx", city = "skund_forest", },
    ["9a31c9ef4b6f89a6c87f752ee9c73a251dbf04fa"] = { spot = "grflx", city = "skund_forest", },
    ["81c9cb66ea235701ca5b36404d3d25a657fe6b13"] = { spot = "grflx", city = "skund_forest", },
    ["f7a0c67b412ef21acb6e4647df124b1576043d3c"] = { spot = "grflx", city = "skund_forest", },
    ["d73c3f706c6f1839c94af1a2271d4faa5b7318be"] = { spot = "grflx", city = "skund_forest", },
    ["a1511e4ca8a70d93d551347494fc97ce2da41c62"] = { spot = "grflx", city = "skund_forest", },
    ["72019ab24d167fe86b553234428d611d440241b5"] = { spot = "grflx", city = "skund_forest", },
    ["aa5d3cfcb0ad8df1e4737d8c5e2d8151cf8acb86"] = { spot = "grflx", city = "skund_forest", },
    ["de4e8ed869fd0d6a6795fe5ed504e3c3400946eb"] = { spot = "grflx", city = "skund_forest", },
    ["5406e564343fda9a97d5f27255baa04e2ab44a5f"] = { spot = "grflx", city = "skund_forest", },
    ["fcc311043aeff5941e612d01f9141ca53a70fc32"] = { spot = "grflx", city = "skund_forest", },
    ["9c6da28cd342030de373338ea92bc74af9624166"] = { spot = "grflx", city = "skund_forest", },	
	--Grflx Upper, Skund Forest
    ["42cc8e8d400b8b9229f0b28352081d949b276dca"] = { spot = "grflx2", city = "skund_forest", },
    ["9b61426230fa82ca08f292adf128e2134b39c641"] = { spot = "grflx2", city = "skund_forest", },
    ["7faa2b8f46fda39e512066dcd844fef413f0366b"] = { spot = "grflx2", city = "skund_forest", },
    ["24f4c225ede14b4a53f0bd7b2b3dc2a7ec09fe30"] = { spot = "grflx2", city = "skund_forest", },
    ["fbc283405bff55f7f0e255ad31862e35dfb97482"] = { spot = "grflx2", city = "skund_forest", },
    ["ca0796665a89d5e2686c952f3cc6a99b8f995529"] = { spot = "grflx2", city = "skund_forest", },
    ["40e71f305a66a346a05f4537ae217a074380294d"] = { spot = "grflx2", city = "skund_forest", },
    ["7dadbe4678c034355741e3304c5df4678a39d847"] = { spot = "grflx2", city = "skund_forest", },
    ["bda91e0a379d2443b2d9738ce8f4bcf98cd892c9"] = { spot = "grflx2", city = "skund_forest", },
    ["4badc0465974ccd566f2230acce9763e16c8e4bd"] = { spot = "grflx2", city = "skund_forest", },
    ["e49fa76a8913216d3f6f3dcd94c97548a021a463"] = { spot = "grflx2", city = "skund_forest", },
    ["19b6bd53c9c2ea1fac79e9036f7a01a6b0bc1821"] = { spot = "grflx2", city = "skund_forest", },
    ["e582fdd64562b1e937cde9dee5195f1dd8ebacc1"] = { spot = "grflx2", city = "skund_forest", },
    ["7b5354448a338cd98ca728b198ad53e3a81aba9c"] = { spot = "grflx2", city = "skund_forest", },
    ["d38132879f02dd6235fe6f01413e6f2833e2883f"] = { spot = "grflx2", city = "skund_forest", },
    ["3f1f56e5f341b30876b8f3571954e302c723deb2"] = { spot = "grflx2", city = "skund_forest", },
    ["0e27c98cc3c691b50a15bd4d78be9054784c5111"] = { spot = "grflx2", city = "skund_forest", },
    ["a66557177cf7f18ec15aff60defc7afca44b364c"] = { spot = "grflx2", city = "skund_forest", },
    ["82c24e5b94b56859df82c0b0d7bacf9a1713980e"] = { spot = "grflx2", city = "skund_forest", },
    ["bcb064ce92ac26ca3dd8d2654ee25fad25a45425"] = { spot = "grflx2", city = "skund_forest", },
    ["78a933923340f4a5bb21495776f04fa16cff3593"] = { spot = "grflx2", city = "skund_forest", },
    ["2f94151b4ec50febb372726ec1f7fa1b45d2ffb7"] = { spot = "grflx2", city = "skund_forest", },
    ["78a4de62bab0c5d4e0bb41fb3aa1bee451094ba1"] = { spot = "grflx2", city = "skund_forest", },
    ["2eefaafa61d74e7b32827f604b0970c5cda4c262"] = { spot = "grflx2", city = "skund_forest", },
    ["414562c51beb09f3eeb23110875df9645889b326"] = { spot = "grflx2", city = "skund_forest", },
    ["ab7068e8e2d1b1afdd8f9d3aa4233bd3b2b85299"] = { spot = "grflx2", city = "skund_forest", },
    ["d57365bb848e2552543c891c28a189edd597fbff"] = { spot = "grflx2", city = "skund_forest", },
    ["fa9bafd2297f58888496cda19e5c8118e6085f31"] = { spot = "grflx2", city = "skund_forest", },
    ["a5fc6a39f1fb5820dcd36a64a3be41e385ab9f66"] = { spot = "grflx2", city = "skund_forest", },
	--Xroads, DJB
	["9bbdc927fc1a5b3d649aeaf9cd5ceadc4ec992a9"] = { spot = "xroads", city = "djelibeybi", },
    ["a16c7982aff3038f00e35c7c14bf4dddc3f363d3"] = { spot = "xroads", city = "djelibeybi", },
    ["0c4f6806e06b7b32d4682b623c6beb88c5a46a85"] = { spot = "xroads", city = "djelibeybi", },
    ["c5ad85e00c2fb42578125e33069ec78959d86351"] = { spot = "xroads", city = "djelibeybi", },
    ["66378c0e7cee66cd1c1e660b66fd56442fa5dfbc"] = { spot = "xroads", city = "djelibeybi", },
    ["dc7a07f401993816d5a4fe315206ded25857154f"] = { spot = "xroads", city = "djelibeybi", },
    ["69f338bf5500c06b1e3e412759fb85a4d65d73f8"] = { spot = "xroads", city = "djelibeybi", },
    ["e06583ec49edb5350abc913725fa32d1ffbb6175"] = { spot = "xroads", city = "djelibeybi", },
    ["dc901483b6eb1af50d1fcd831f3c38a6773c0532"] = { spot = "xroads", city = "djelibeybi", },
    ["388850f565d215855886d8cbefce7911d1b21313"] = { spot = "xroads", city = "djelibeybi", },
    ["68dd7dfb1457ed867dc74b033223478b2a70ab60"] = { spot = "xroads", city = "djelibeybi", },
    ["88578bc2bb0e627df0f0f2903c4c373b33f810da"] = { spot = "xroads", city = "djelibeybi", },
    ["682d2bfaffc2bb53a2dec39765b3e6e46165f7b7"] = { spot = "xroads", city = "djelibeybi", },
    ["af6f704d5784518aada0f19593b2e9d38411abed"] = { spot = "xroads", city = "djelibeybi", },
    ["789868105135440c6e4d34047be4381d97cfd610"] = { spot = "xroads", city = "djelibeybi", },
    ["8c8f53eb3b312ac3746341a6700703a98234ce69"] = { spot = "xroads", city = "djelibeybi", },
    ["4ed9b9006731e04ade1ed9c34d41861fbe8ae1b1"] = { spot = "xroads", city = "djelibeybi", },
    ["ee0ea007e6dbd740482acf81383b1c188f97bd23"] = { spot = "xroads", city = "djelibeybi", },
    ["c83c7fe6a50cd9c33c33460e817fde745ac24f27"] = { spot = "xroads", city = "djelibeybi", },
    ["54433577da7798897090d452bbdfba42eee2ee2f"] = { spot = "xroads", city = "djelibeybi", },
    ["8791398637af192887697dc2fda1a39f1f12394e"] = { spot = "xroads", city = "djelibeybi", },
    ["6366c69a856329153d12b2995d27a363e67e9d03"] = { spot = "xroads", city = "djelibeybi", },
    ["21b4fa7b0107f023f3da13803b6b6f269f0271da"] = { spot = "xroads", city = "djelibeybi", },
    ["1fb8ec5a1f1c29d2aef81fd20d88bae58e0064e9"] = { spot = "xroads", city = "djelibeybi", },
    ["44408d86685482c895bd5fb5c064208d9b004965"] = { spot = "xroads", city = "djelibeybi", },
    ["ae0ccb4a93f9773de9821384e74b1804fa7de532"] = { spot = "xroads", city = "djelibeybi", },
    ["ef2718a5508fa10fd9555390534b921656fb8f0b"] = { spot = "xroads", city = "djelibeybi", },
    ["8c4e4c2eaf7cb4db280f253660a188d7fc2ae741"] = { spot = "xroads", city = "djelibeybi", },
    ["f6ef1862afac1cc327688133471e8c61aa1a9627"] = { spot = "xroads", city = "djelibeybi", },
    ["e11dd47549db96d9c7422722faeba47ebba35d05"] = { spot = "xroads", city = "djelibeybi", },
    ["8d82cab11a6a5063c00c09502e290fd5121bef2e"] = { spot = "xroads", city = "djelibeybi", },
    ["b455aa46e25a5de6fbe72daf2e4d5c4344d3283b"] = { spot = "xroads", city = "djelibeybi", },
    ["267a1e0b26795f7a67211c71c9b265c35f306aae"] = { spot = "xroads", city = "djelibeybi", },
    ["cd288cae38a7bad77691cd26763d687e10bb4937"] = { spot = "xroads", city = "djelibeybi", },
    ["3b2ef2ce3cf7f13190ab30c7e90ad9a8e0f23bf6"] = { spot = "xroads", city = "djelibeybi", },	
	--Oasis, Klatch
    ["d10693b4bd43e42abf25a3c2f28914e7eddbc8d2"] = { spot = "oasis", city = "klatch", },
    ["c24f24dbb267fd19708170929c5ee25cba003554"] = { spot = "oasis", city = "klatch", },
    ["dc99557302a26b4c47f19d4afff5affca814420a"] = { spot = "oasis", city = "klatch", },
    ["482f82180dfd58da05af5e4ae5c7c2b5b159f06e"] = { spot = "oasis", city = "klatch", },
    ["f0a99e7fee259897cf0697772e5bde89bbb9ba8a"] = { spot = "oasis", city = "klatch", },
    ["c06a03e5dc918472f987bfc2c84766be6dc229a2"] = { spot = "oasis", city = "klatch", },
    ["ed16e59f89659bcc97e65827f2ac2b9bf18d5a50"] = { spot = "oasis", city = "klatch", },
    ["a3af17645c61b0a9473c098532a07461ac8f8c01"] = { spot = "oasis", city = "klatch", },
    ["f2ad98a21df7eb3082ee5fbd538929174ffe0ce4"] = { spot = "oasis", city = "klatch", },
    ["d618e5a3ae1aa692dc1cd73cd1d7d40c08c1710c"] = { spot = "oasis", city = "klatch", },
    ["404a2c76d5c3976881d9619d4e88ddc2b05a8213"] = { spot = "oasis", city = "klatch", },
    ["703b4253460a7ffaf320be63b4abd8b01d27c7ae"] = { spot = "oasis", city = "klatch", },
    ["4b25ed1f44c1a870918be9495edb17c38ab6f6a4"] = { spot = "oasis", city = "klatch", },
    ["3697ea9390dd6d1d2a273b3635f27ba0f70b36fd"] = { spot = "oasis", city = "klatch", },
    ["2137677a10aedd82fa3f9e63680dfcf274dd6ed2"] = { spot = "oasis", city = "klatch", },
    ["997cda132917daef79d5330e14b837408b76dfbb"] = { spot = "oasis", city = "klatch", },
    ["d16eb303a48474a47976038ea90c6ffd531ec975"] = { spot = "oasis", city = "klatch", },
    ["67a501bc451ad97c04ae3d2592110ea7caedd5ff"] = { spot = "oasis", city = "klatch", },
    ["3d1583af23c0b75cd858d6646cd297c6d89c8619"] = { spot = "oasis", city = "klatch", },
    ["178312c1ab469b7a7496c78eaafda6c6ce113374"] = { spot = "oasis", city = "klatch", },
    ["a0a041f9a0fa4024467919c15fe662bf3896b169"] = { spot = "oasis", city = "klatch", },
    ["b15950601c93e3adab31fb7755829cf3ed93b5b5"] = { spot = "oasis", city = "klatch", },
    ["49f7148b160524fb43fc4cb14a6f60fe57fe00df"] = { spot = "oasis", city = "klatch", },
    ["899ad0dfdfc25ad0ebeb4ed861ea18e339adb4d0"] = { spot = "oasis", city = "klatch", },
    ["12f08890a7522d42f70b2ac24b3e726cf1153372"] = { spot = "oasis", city = "klatch", },
    ["eb9a2d307404b035eb2a03d8308ed0b958f5dba1"] = { spot = "oasis", city = "klatch", },
    ["152995d38d460f72a52946ee91c8f5d86b911407"] = { spot = "oasis", city = "klatch", },
    ["54f7bcaf87821cab2fc295f961d26045a03639fe"] = { spot = "oasis", city = "klatch", },
    ["c8516e4e4017a99cd19183e5918c3bf767918ef0"] = { spot = "oasis", city = "klatch", },
    ["2bfc37a494acc73357712fa6bf5c8df85ee85787"] = { spot = "oasis", city = "klatch", },
    ["6dd759fc275793325c3f7449cd7f319af4f9892d"] = { spot = "oasis", city = "klatch", },
    ["155891cd9cc51c35147afb97567b18ba218230ee"] = { spot = "oasis", city = "klatch", },
    ["6d746ddf59a1d71768441ca90fa3231828e8c9d3"] = { spot = "oasis", city = "klatch", },
    ["54fe3495c98d245205032591f181d34f37d28499"] = { spot = "oasis", city = "klatch", },
    ["4293155ea62d07cfa5ad2ae7ea5520d17a05dd77"] = { spot = "oasis", city = "klatch", },
    ["86a0f63349a175ad8e7f4f399ada0198459ae13c"] = { spot = "oasis", city = "klatch", },
    ["5890eb913e3d61c3487a194dc8a84763a084f946"] = { spot = "oasis", city = "klatch", },
    ["350f005214ee12960158a94605306256db307037"] = { spot = "oasis", city = "klatch", },
    ["1fc7a3538c9d460422fec0c8588dbc03441301ea"] = { spot = "oasis", city = "klatch", },
    ["821e7e9c7ef7373f1c33e17234420fc93cd9d328"] = { spot = "oasis", city = "klatch", },
    ["fb9b51524b9134853816a851b3f4d4bd607b0a42"] = { spot = "oasis", city = "klatch", },
    ["33ec570328e188f97089643a5905bfb17a10c08e"] = { spot = "oasis", city = "klatch", },
    ["e7ddc0b0765f15a52c17e56945e92d5ae324cb33"] = { spot = "oasis", city = "klatch", },
    ["b7601e0ccb5467881f95831700de67cd8c915fc1"] = { spot = "oasis", city = "klatch", },
    ["a4a051b90a36fe0f931249db20fc706183ebefda"] = { spot = "oasis", city = "klatch", },
    ["0444202d16b474d10f83a562bfaef98feb641bb2"] = { spot = "oasis", city = "klatch", },
    ["94af12894049c07d7698c9aa3d0bf10e581de8f5"] = { spot = "oasis", city = "klatch", },
    ["eff2d429242a3c9a6830d57c21d1a19b8b677ce0"] = { spot = "oasis", city = "klatch", },
    ["066ae1b58fc230eb5750bb3c81a52c12ddc1ccce"] = { spot = "oasis", city = "klatch", },
    ["186cccf839f075f9e0bafa2223158201fb5f5fbc"] = { spot = "oasis", city = "klatch", },
    ["b679c4ecfdddc547101fc16634493b3c9f4a490e"] = { spot = "oasis", city = "klatch", },
    ["a983d6a564f1dd5d8a901ad42f718626cfdbff49"] = { spot = "oasis", city = "klatch", },	
	--Delbert, AM
    ["b1042810bc21aec776186de4f934e94ca67b6efb"] = { spot = "delbert", city = "ankh-morpork", },	
	--Rat-hole, AM
    ["03360211b315daf089d9ba329dd32417b9c7f54c"] = { spot = "rathole", city = "ankh-morpork", },	
	--Vampires, Magpyr's Castle
--[[
    ["d56893b58e202861af0bc895fd6ab840faedfcfb"] = { spot = "vamps", city = "magpyr_castle", },
    ["d2c4f2360068a3b34183260ee9ad3f441787cadf"] = { spot = "vamps", city = "magpyr_castle", },
    ["d75d7b059ca328990c3feaa8cad949bbc0b5a114"] = { spot = "vamps", city = "magpyr_castle", },
    ["3b4026bbd8008e81745093b06c6c9f7c8e9897e6"] = { spot = "vamps", city = "magpyr_castle", },
    ["5b68cf29a8ba07d851162c105b28a5b585b03f93"] = { spot = "vamps", city = "magpyr_castle", },
    ["3102a8e800298104fc7af09860983ef9336fcd2f"] = { spot = "vamps", city = "magpyr_castle", },
    ["c34fa8646c5fda9984a8e7528a9692fb2137147a"] = { spot = "vamps", city = "magpyr_castle", },
    ["23892c0b0acd73b17cf0c3362ca728aba4a15399"] = { spot = "vamps", city = "magpyr_castle", },
    ["414604d7b37d470bd131ea338ace2eaa2b5e6a72"] = { spot = "vamps", city = "magpyr_castle", },
    ["cce641ccc5f06213de9252f0d66ff12204bdd79d"] = { spot = "vamps", city = "magpyr_castle", },
    ["7aa83ec6f68e81f23325505368938eca3abfbf63"] = { spot = "vamps", city = "magpyr_castle", },
    ["53b9e08c04935cc33cd188b5590ff07e7a56aafc"] = { spot = "vamps", city = "magpyr_castle", },
    ["43350cf0ba330e63c9f2d253b0fc41e73a094abb"] = { spot = "vamps", city = "magpyr_castle", },
    ["ef9548845584a83d1bfb5f2635bd44413d13aa7f"] = { spot = "vamps", city = "magpyr_castle", },
    ["d7124291ee45f0484cb43c7eb7fddd822074891e"] = { spot = "vamps", city = "magpyr_castle", },
    ["128ca6ad5e4d1049334abb47d4abfd00bca24670"] = { spot = "vamps", city = "magpyr_castle", },
    ["bd81965192bd5d234b0233e9aeb4c85855fd22d9"] = { spot = "vamps", city = "magpyr_castle", },
    ["9de04cfca6e5de78870748e43d3e7933c8fa690c"] = { spot = "vamps", city = "magpyr_castle", },
    ["e6e78a0d209c315a4f8044a0b5a1254f02676d6f"] = { spot = "vamps", city = "magpyr_castle", },
    ["af0595365eba270d3b033e825949a386cd56f6b1"] = { spot = "vamps", city = "magpyr_castle", },
    ["b76dcfd73efd3cb3009bee292672781a367a243a"] = { spot = "vamps", city = "magpyr_castle", },
    ["4aa0ef9f1b4fdb99c7ba7b0ad997b0390f45d4d6"] = { spot = "vamps", city = "magpyr_castle", },
    ["d26d7e773261492e54a5b0405fedc612c5a6e5eb"] = { spot = "vamps", city = "magpyr_castle", },
    ["10e8c83f46ae31bdbb4d518ed1f8550e129a3c89"] = { spot = "vamps", city = "magpyr_castle", },
    ["5e198f09da027d26bdc46b2985974c2ff2edd682"] = { spot = "vamps", city = "magpyr_castle", },
    ["b424a5fb09311b5f24d7137e45fbbb66801c979e"] = { spot = "vamps", city = "magpyr_castle", },
    ["f31fa3b5c41c51cb548197fe5bfa8d5bbbb7f392"] = { spot = "vamps", city = "magpyr_castle", },
    ["8fb68b06683baf90745af880d2ddadf1e2aace17"] = { spot = "vamps", city = "magpyr_castle", },
    ["6bc06c0d1e190a1e1d74e22bd55b2531f2585bbe"] = { spot = "vamps", city = "magpyr_castle", },
    ["2d57cd4fbcb2c3abf57cb023748728fe8cd3def0"] = { spot = "vamps", city = "magpyr_castle", },
    ["d0332916481843619a42e7b1018bfb31443e6296"] = { spot = "vamps", city = "magpyr_castle", },
    ["4a5ff4bb5de897cdfe8626e9a63ea0890585b3b5"] = { spot = "vamps", city = "magpyr_castle", },	
--]]
} -- end of GMCP room identifiers

local IAC, SB, SE, DO = 0xFF, 0xFA, 0xF0, 0xFD
local GMCP      = 201
--local GMCPDebug = tonumber(GetVariable("GMCPDebug")) or 0
bIgnoreBroadcasts = false
--[[
function gmcpdebug(name, line, wildcards)
   newval = tonumber(wildcards[1])
   if not newval or newval > 2 or newval < 0 then
      ColourNote("darkorange", "", "GMCPDebug valid values are: 0 - off, 1 - simple, 2 - verbose")
      return
   end
   GMCPDebug = newval
   local msg = "off"
   if GMCPDebug == 1 then
      msg = "simple"
   elseif GMCPDebug == 2 then
      msg = "verbose"
   end
   ColourNote ("darkorange", "", "GMCPDebug: " .. msg)
end
]]--
---------------------------------------------------------------------------------------------------
-- Mushclient callback function when telnet SB data received.
---------------------------------------------------------------------------------------------------
function OnPluginTelnetSubnegotiation (msg_type, data)

   if msg_type ~= GMCP then
      return
   end -- if not GMCP
  
   -- debugging
--[[
	if GMCPDebug > 0 then 
     ColourNote ("darkorange", "", data) 
   end
]]--
   message, params = string.match (data, "([%a.]+)%s+(.*)")
  
   -- if valid format, broadcast to all interested plugins
   if message then
	  GetGMCPData(data)
   end -- if
   
end -- function OnPluginTelnetSubnegotiation

-- Actually send a GMCP packet to the MUD (has to be packaged up specially)
function Send_GMCP_Packet (sPacketData)
  assert (sPacketData, "Send_GMCP_Packet passed a nil message.")
  SendPkt (string.char (IAC, SB, GMCP) .. (string.gsub (sPacketData, "\255", "\255\255")) .. string.char (IAC, SE))
end -- Send_GMCP_Packet


function OnPluginTelnetRequest (msg_type, data)
   if msg_type == GMCP and data == "WILL" then
      return true
   end -- if
  
   if msg_type == GMCP and data == "SENT_DO" then
      --Note ("Enabling GMCP.") 
      -- This hard-coded block may need to be made into a config table as we add more message types.
      Send_GMCP_Packet (string.format ('Core.Hello { "client": "MUSHclient", "version": "%s" }', Version()))
--      Send_GMCP_Packet ('Core.Supports.Set [ "Char 1", "Comm 1", "Room 1" ]')
      local sSupports = '"room.info"'
      sSupports = sSupports .. ', "room.map"'
      sSupports = sSupports .. ', "room.writtenmap"'
      sSupports = sSupports .. ', "char.vitals"'
      sSupports = sSupports .. ', "char.info"'	  
      Send_GMCP_Packet ('Core.Supports.Set [ ' .. sSupports .. ' ]')

      return true
   end -- if GMCP login needed (just sent DO)

   return false
end -- function OnPluginTelnetRequest

require "tprint"
require "json"
---End GMCP stuff

CharVitals = {}
function gotCharacterVitals (info)
	CharVitals = info
	timer_xp = tonumber(CharVitals.xp) -- get xp from mxp
		set_xp(timer_xp)

  --tprint (RoomInfo)
end  -- gotCharacterVitals

RoomInfo = {}
function gotRoomInfo (info)
	if info.identifier == nil then return end
	RoomInfo = info

	--Lets see if current location matches a spot
	if RoomIDs[RoomInfo.identifier] ~= nil then
		IsNow = RoomIDs[RoomInfo.identifier]["spot"]
		--Not in a spot
		if InSpot == false then
			--This is in case there are spots that have not yet been configured
			if _G[IsNow] ~= nil then
				enter_spot(_G[IsNow])
			end
		--In a different spot
		elseif InSpot == true and _G[IsNow] ~= last_spot_visited then
			exit_spot(last_spot_visited)
			enter_spot(_G[IsNow])
		end
		return
	--Must not be a spot - probably have to add exceptions to spots without IDs
	else
		if InSpot == true then
			exit_spot(last_spot_visited)
		end
	end
  --tprint (RoomInfo)
end  -- gotRoomInfo

handlers = {
  ["char.vitals"]         = gotCharacterVitals,
  ["room.info"]           = gotRoomInfo,
  } -- end of handlers

function GetGMCPData(text)
   -- pull out GMCP message, plus the data belonging to it
   message, params = string.match (text, "([%a.]+)%s+(.*)")
  
   -- no match? oops!
   if not message then
      return
   end -- if
           
   -- ensure we have an array or object
   if not string.match (params, "^[%[{]") then
      params =  "[" .. params .. "]"  -- JSON hack, make msg first element of an array.
   end -- if 
   
   -- decode it
   result = assert (json.decode (params))
      
   -- find a handler for this message type
   local handler = handlers [message:lower ()]
   
   -- warn if not found
   if not handler then
--     ColourNote ("red", "", "Warning: No handler for: " .. message)
     return
   end -- no handler
   
   -- call the handler, pass in whatever we got
   handler (result)

end

--------------------------------------------------------------------------------
--   MAIN WINDOW
--------------------------------------------------------------------------------
function update_window() -- draw window here
	WindowRectOp (win, 2, 0, 0, window_width, window_height, ColourNameToRGB("black"))-- clears the window so old frame doesn't show
	WindowResize(win, window_width, window_height, ColourNameToRGB("black")) 
	WindowCircleOp (win, 3, win_outter_padding, win_outter_padding, window_width - win_outter_padding, window_height - win_outter_padding,
        win_frame_colour, 0, win_border, win_frame_colour, 0, win_corner, win_corner) -- frame
	WindowCircleOp (win, 3, win_outter_padding, win_outter_padding+(win_corner/2), window_width-win_outter_padding, window_height-win_outter_padding-(win_corner/2),
        win_frame_colour, 0, win_border, win_bg_colour, 0, 0, 0) -- inner-frame, rectangle that stops just short of rounded edges
	WindowGradient (win, win_outter_padding+win_border-1, win_outter_padding+(win_corner/2), window_width-win_outter_padding-win_border,win_header+win_outter_padding,
                win_frame_colour, 
                win_bg_colour, 2)  -- header
	WindowGradient (win, win_outter_padding+win_border-1, window_height-(win_footer+win_outter_padding), window_width-win_outter_padding-win_border, window_height-(win_outter_padding+(win_corner/2)),
                win_bg_colour, 
                win_frame_colour, 2)  -- footer

	--------------------------------- displaying times -------------------------------
	m = 1
	local isDisplayingStats = " and stats"
	if varStatsWindowHeight == "off" then
		isDisplayingStats = ""
	elseif varStatsWindowHeight == "brief" then
		isDisplayingStats = " and current kills"
	end
	--Note(isDisplayingStats)
	for i, v in sort_spots(hot_spots, sort_mode) do
		
		if not(v[hidden]) then
			if WindowHotspotInfo(win, "name_"..hot_spots[i][spot_name], 1) ~= nil then
				WindowMoveHotspot(win, "name_"..hot_spots[i][spot_name],   
                win_outter_padding+win_inner_padding, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header-(win_vertical_spacing*.5), win_outter_padding+win_inner_padding+spot_name_width, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header+(win_vertical_spacing*.5))
				WindowMoveHotspot(win, "time_"..hot_spots[i][spot_name],  
                win_outter_padding+win_inner_padding+spot_name_width+win_vertical_spacing, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header-(win_vertical_spacing*.5), window_width-win_outter_padding, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header+(win_vertical_spacing*.5))
			else
				WindowAddHotspot(win, "name_"..hot_spots[i][spot_name],  -- for spot name text
					win_outter_padding+win_inner_padding, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header-(win_vertical_spacing*.5), win_outter_padding+win_inner_padding+spot_name_width, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header+(win_vertical_spacing*.5),   -- rectangle
					 "mouseover",   -- MouseOver
					 "canclemouseover",   -- CancelMouseOver
					 "mousedown", --mousedown
					 "canclemousedown", --cancelmousedown 
					 "mouseup", --mouseup 
					 "Displaying last killed" .. tostring(isDisplayingStats) .. ".\nRight-click for options.",  -- tooltip text
					 1, 0)  -- hand cursor
				WindowAddHotspot(win, "time_"..hot_spots[i][spot_name],  -- for the spot time
					win_outter_padding+win_inner_padding+spot_name_width+win_vertical_spacing, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header-(win_vertical_spacing*.5), window_width-win_outter_padding, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header+(win_vertical_spacing*.5), -- rectangle
					 "mouseover",   -- MouseOver
					 "canclemouseover",   -- CancelMouseOver
					 "mousedown", --mousedown
					 "canclemousedown", --cancelmousedown 
					 "", --mouseup 
					 "Displaying last entered.",  -- tooltip text
					 1, 0)  -- hand cursor
			end
		
			WindowText (win, get_spot_font(i), get_spot_name(i),
				win_outter_padding+win_inner_padding, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header, win_outter_padding+win_inner_padding+spot_name_width, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header, get_spot_colour(i, time_killed), 
				false) -- not Unicode
			if highlighted_name == i then
				WindowRectOp (win, miniwin.rect_invert, win_outter_padding+win_inner_padding, win_outter_padding+m*(win_vertical_spacing+font_height)-		font_height+win_header, win_outter_padding+win_inner_padding+spot_name_width, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header, 
				ColourNameToRGB("white")) 
			end
				WindowText (win, "f", get_spot_time(i),
				win_outter_padding+win_inner_padding+spot_name_width+win_vertical_spacing, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header, window_width-win_outter_padding, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header, get_spot_colour(i, time_entered), 
				false) -- not Unicode	
			if highlighted_time == i then
				WindowRectOp (win, miniwin.rect_invert, win_outter_padding+win_inner_padding+spot_name_width+win_vertical_spacing, win_outter_padding+m*(win_vertical_spacing+font_height)-font_height+win_header, window_width-win_outter_padding-win_inner_padding, win_outter_padding+m*(win_vertical_spacing+font_height)+win_header, ColourNameToRGB("white")) 
			end
	
		m = m + 1
	
		else
			if WindowHotspotInfo(win, "name_"..hot_spots[i][spot_name], 1) ~= nil then
				WindowDeleteHotspot (win, "name_"..hot_spots[i][spot_name])
				WindowDeleteHotspot (win, "time_"..hot_spots[i][spot_name])
			end
		end
	end
	if varStatsWindowHeight == "off" then
		WindowDeleteHotspot (win, "stats")
	else
		WindowLine (win, win_outter_padding+win_border-1, window_height-win_stats_height-win_footer, window_width-win_outter_padding-win_border, window_height-win_stats_height-win_footer, win_frame_colour, miniwin.pen_dot, 0)
		--WindowDeleteHotspot (win, "stats")
		WindowAddHotspot(win, "stats",  -- stats
			win_outter_padding+win_border-1, window_height-win_stats_height-win_footer, window_width-win_outter_padding-win_border, window_height-win_footer,   -- rectangle
			"mouseover",   -- MouseOver
			"cancelmouseover",   -- CancelMouseOver
			"mousedown",
			"cancelmousedown", 
			"mouseup", 
			hot_spots[highlighted_name][long_name].." Stats",  -- tooltip text
			1, 0)  -- hand cursor
		--------------------------------- stat stuff below -------------------------------
		for i, v in ipairs(hot_spots) do
			if  highlighted_name == i then
				for p = 1, 4, 1 do
					if p == 1 then -- kill counter
						WindowText (win, "f", "kills: "..tostring(v[kill_count].."/"..tostring(v[kill_reset])), win_outter_padding+win_inner_padding, win_outter_padding+p*(win_vertical_spacing+font_height)-font_height+(window_height-win_stats_height-win_footer), spots_window_width+win_outter_padding, win_outter_padding+p*(win_vertical_spacing+font_height)+(window_height-win_stats_height-win_footer), ColourNameToRGB("white"))
					elseif p == 2 then -- xp yeild
						if v[initial_xp] and v[final_xp] then
							if v[final_xp] >= v[initial_xp] then
								xp_yield = v[final_xp] - v[initial_xp] 
							elseif timer_xp >= v[initial_xp] then -- probably unnesserery since initial_xp and final_xp are both reset upot spot entry
								xp_yield = timer_xp - v[initial_xp]
							else
								xp_yield = 0
							end
						elseif v[initial_xp] then
							if timer_xp >= v[initial_xp] then
								xp_yield = timer_xp - v[initial_xp]
							else
								xp_yield = 0
							end
						else
							xp_yield = 0
						end
						if varStatsWindowHeight == "full" then
							WindowText (win, "f", tostring(comma_value(xp_yield)).." xp in", win_outter_padding+win_inner_padding, win_outter_padding+p*(win_vertical_spacing+font_height)-font_height+(window_height-win_stats_height-win_footer), spots_window_width+win_outter_padding, win_outter_padding+p*(win_vertical_spacing+font_height)+(window_height-win_stats_height-win_footer), ColourNameToRGB("white"))
						end
					elseif p == 3 then -- duration
						if v[time_entered] and v[time_exited] then
							if v[time_exited] >= v[time_entered] then
								duration = v[time_exited] - v[time_entered]
							else
								duration = os.time() - v[time_entered]
							end
						elseif v[time_entered] then
							duration = os.time() - v[time_entered]
						else
							duration = 0
						end
						if varStatsWindowHeight == "full" then
							WindowText (win, "f", tostring(round((duration/60), 2)).." mins.", win_outter_padding+win_inner_padding, win_outter_padding+p*(win_vertical_spacing+font_height)-font_height+(window_height-win_stats_height-win_footer), spots_window_width+win_outter_padding, win_outter_padding+p*(win_vertical_spacing+font_height)+(window_height-win_stats_height-win_footer), ColourNameToRGB("white"))
						end
					else -- rate
						if xp_yield and (duration ~= 0) then
							xp_per_hr =  xp_yield / (duration/(60*60))
						else
							xp_per_hr = 0
						end
						if varStatsWindowHeight == "full" then
							WindowText (win, "f", tostring(comma_value(math.floor(xp_per_hr/1000))).."k xp/hr", win_outter_padding+win_inner_padding, win_outter_padding+p*(win_vertical_spacing+font_height)-font_height+(window_height-win_stats_height-win_footer), spots_window_width+win_outter_padding, win_outter_padding+p*(win_vertical_spacing+font_height)+(window_height-win_stats_height-win_footer), ColourNameToRGB("white"))
						end
					end
				end
				break
			end
		end
	end
	WindowShow (win,  true)
end
--------------------------------------------------------------------------------
--   DISPLAY FUNCTIONS
--------------------------------------------------------------------------------
function get_spot_time(spot)
	if hot_spots[spot][time_entered] then
		--Reva: default at 4 hours
		local end_time = 60*60*4
		--Reva: for narrow and slim change it to 100 mins
		if varMiniWindowWidth == "narrow" or varMiniWindowWidth == "slim" then
			end_time = 60*100
		end
		--Reva: edited for narrow and slim
		--OLD: if (os.time()-hot_spots[spot][time_entered] >= (60*60*4)) then -- reset to unknown after 4 hours
		if (os.time()-hot_spots[spot][time_entered] >= end_time) then 
			restart_spot(spot)
			return format_time()
		else
			if not(hot_spots[spot][spot_down]) and hot_spots[spot][time_killed] then
				if (hot_spots[spot][time_killed] >= hot_spots[spot][time_entered]) then
					time_used = hot_spots[spot][time_killed]
				else
					time_used = hot_spots[spot][time_entered]
				end
			else
				time_used = hot_spots[spot][time_entered]
			end
			if hot_spots[spot][time_killed] and (highlighted_name == spot) then
				time_used = hot_spots[spot][time_killed]
			elseif hot_spots[spot][time_entered] and (highlighted_time == spot) then
				time_used = hot_spots[spot][time_entered]
			elseif (highlighted_name == spot) or (highlighted_time == spot) then
				return format_time()
			end
			return format_time(time_used)
		end
	else
		return format_time()
	end
end

function get_spot_font(spot)
	if hot_spots[spot][spot_down] then
		return "f2"
	else
		return "f"
	end
end

--Some spots lets display differently than their names
function display_spot_name(spot)
	if tostring(spot) == "smugs" then
		--Added this option for those who rather it be smugs, can be changed by right-clicking on the name
		if bDisplayAsSmugs == false then
			actual_spot_name = "smugglers"
		else
			actual_spot_name = "smugs"
		end
	elseif  tostring(spot) == "rathole" then
	  actual_spot_name = "rat-hole"
	elseif  tostring(spot) == "dhs" then
	  actual_spot_name = "DHS"
	elseif  tostring(spot) == "coons" then
	  actual_spot_name = "cocoons"
	elseif  tostring(spot) == "h&e" then
	  actual_spot_name = "H&E"
--Spots been removed!
--[[
	elseif  tostring(spot) == "vamps" then
	  actual_spot_name = "vampires"
	  ]]--
	else
		actual_spot_name = tostring(spot)
	end
	actual_spot_name = string.gsub(" "..actual_spot_name, "%W%l", string.upper):sub(2)

	return actual_spot_name

end

function get_spot_name(spot)
	modified_spot_name = display_spot_name(hot_spots[spot][spot_name])
	if hot_spots[spot][big_spawn] then 
		modified_spot_name = modified_spot_name.."!" 
	end

	return modified_spot_name
end

function get_spot_colour(spot, type, order)
	if (highlighted_name == spot) and not(order) then type = time_killed end -- so mouseover doesn't change ordering
	if (highlighted_time == spot) and not(order) then type = time_entered end
	if hot_spots[spot][type] then
		if os.time() - hot_spots[spot][type] >= (hot_spots[spot][stage5]*60) then
			--percentage = ((os.time() - hot_spots[spot][type]) - (hot_spots[spot][stage4]*60))/((hot_spots[spot][stage5]*60) - (hot_spots[spot][stage4]*60))*100
			if order == 1 then return 0 elseif order == 0 then return 5 else
				return ColourNameToRGB("white")
			end
		elseif os.time() - hot_spots[spot][type] >= (hot_spots[spot][stage4]*60) then
			percentage = ((os.time() - hot_spots[spot][type]) - (hot_spots[spot][stage4]*60))/((hot_spots[spot][stage5]*60) - (hot_spots[spot][stage4]*60))*100
			if order == 1 then return percentage elseif order == 0 then return 4 else
				return fade_RGB(yellow, white, percentage)
			end
		elseif os.time() - hot_spots[spot][type] >= (hot_spots[spot][stage3]*60) then
			percentage = ((os.time() - hot_spots[spot][type]) - (hot_spots[spot][stage3]*60))/((hot_spots[spot][stage4]*60) - (hot_spots[spot][stage3]*60))*100
			if order == 1 then  return percentage elseif order == 0 then return 3 else
				return fade_RGB(green, yellow, percentage)
			end
		elseif os.time() - hot_spots[spot][type] >= (hot_spots[spot][stage2]*60) then
			percentage = ((os.time() - hot_spots[spot][type]) - (hot_spots[spot][stage2]*60))/((hot_spots[spot][stage3]*60) - (hot_spots[spot][stage2]*60))*100
			if order == 1 then return percentage elseif order == 0 then return 2 else 
				return fade_RGB(red, green, percentage)
			end
		elseif os.time() - hot_spots[spot][type] >= (hot_spots[spot][stage1]*60) then
			percentage = ((os.time() - hot_spots[spot][type]) - (hot_spots[spot][stage1]*60))/((hot_spots[spot][stage2]*60) - (hot_spots[spot][stage1]*60))*100
			if order == 1 then return percentage elseif order == 0 then return 1 else
				return fade_RGB(gray, red, percentage)
			end
		else
			percentage = ((os.time() - hot_spots[spot][type])/(hot_spots[spot][stage1]*60))*100
			if order == 1 then return perentage elseif order == 0 then return 0 else
				return ColourNameToRGB("gray")
			end
		end
	else
		if order == 1 then return 0 elseif order == 0 then return 6 else
			return ColourNameToRGB("lightgray")
		end
	end
end

InSpot = false
--------------------------------------------------------------------------------
--   XP SPOT FUNCTIONS
--------------------------------------------------------------------------------
function enter_spot(spot)
	--Spot doesn't have any info
	--Can happen if spots not updated, Reva
	if hot_spots[spot] == nil then
		--if debug_notes then 
			if need_update ~= nil and need_update == true then
				if debug_notes then 
					ColourNote("magenta", "", "TIMER ERROR, no info on: " .. string.upper(spot) .. " (Update Needed)") 			
				end
			else
				ColourNote("magenta", "", "TIMER ERROR, no info on: " .. string.upper(spot)) 			
			end
		--end
		return
	end

	if InSpot == true and spot ~= last_spot_visited and spot ~= boss and spot ~= captain then
		exit_spot(last_spot_visited)
	end
	if debug_notes then ColourNote("magenta", "", "ENTER: " .. string.upper(hot_spots[spot][spot_name])) end
	if spot == boss or spot == coons or spot == captain then
		EnableTrigger("enter_"..hot_spots[spot][spot_name], false)
		EnableTrigger("enter_"..hot_spots[spot][spot_name].."_glance", false)
		EnableTrigger("exit_"..hot_spots[spot][spot_name], true)
		EnableTrigger("exit_"..hot_spots[spot][spot_name].."_glance", true)
	end
	--Know we are in a spot
	InSpot = true
	
	--If no death blow trigger lets create a generic one, Reva
	local IfError = EnableTrigger("kill_"..hot_spots[spot][spot_name], true)
	--If no such trigger lets put in a generic one that detects all kills
	if IfError == 30005 then
		if debug_notes then ColourNote("magenta", "", "Generating trigger for :" .. string.upper(hot_spots[spot][spot_name])) end
		local TriggerRegex = "^.* (kill|deals the death blow to) the .*?\.$"
		--Need to do it this way as we need spot to be a number
		local SendText = "kill_spot(" .. spot .. ")"
		AddTriggerEx("kill_"..hot_spots[spot][spot_name], --triggername
					"^.* (kill|deals the death blow to) the .*?\.$", --match text
					SendText, -- response text - to send to the world
					trigger_flag.Enabled + trigger_flag.RegularExpression + trigger_flag.KeepEvaluating + trigger_flag.IgnoreCase, --flags
					-1, --colour, no change
					0,  --wildcard to copy, none
					"", --sound to play 
					"", --script to execute
					12,  --send to
					100) --sequence
	end

	hot_spots[spot][current_location] = true -- this isn't actually used by anything, figured it might be useful in future for something?

	--exception for boss as that is together with medina
	if spot ~= boss and spot ~= captain then 
		last_spot_visited = spot
	end
	time_last_entered = os.time() -- used to keep track of actual time entered (time_entered won't reset under certain circumstances, see below)
	
	if (spot == medina) then 
		EnableTrigger("enter_boss", true)
	end
	
	if (spot == smugs) then 
		EnableTrigger("enter_captain", true)
	end

	if hot_spots[spot][time_exited] then
		if (os.time() - hot_spots[spot][time_exited]) > (120) then -- we don't reset values if it's only been less than 2min since exiting: getting thrown by giants, reshielding at crocs ect.
			hot_spots[spot][time_entered] = os.time()
			hot_spots[spot][time_exited] = false
			hot_spots[spot][kill_count] = 0
			hot_spots[spot][initial_xp] = false
			hot_spots[spot][final_xp] = false
			initial_xp_checks = initial_xp_checks or {}
			table.insert(initial_xp_checks, spot)
		else 
			hot_spots[spot][time_exited] = false
			hot_spots[spot][final_xp] = false
		end
	else 
		hot_spots[spot][time_entered] = os.time()
		hot_spots[spot][time_exited] = false
		hot_spots[spot][kill_count] = 0
		hot_spots[spot][initial_xp] = false
		hot_spots[spot][final_xp] = false
		initial_xp_checks = initial_xp_checks or {}
		table.insert(initial_xp_checks, spot)
	end
	
	highlighted_name = last_spot_visited
	
end

function exit_spot(spot)
	if debug_notes then ColourNote("magenta", "", "EXIT: " .. string.upper(hot_spots[spot][spot_name])) end
	
	--Know we are not in a spot
	--Not true if boss or captain
	if spot ~= boss and spot ~= captain then
		InSpot = false
	end

	if spot == boss or spot == coons or spot == captain then
		EnableTrigger("exit_"..hot_spots[spot][spot_name], false)
		EnableTrigger("exit_"..hot_spots[spot][spot_name].."_glance", false)
		EnableTrigger("enter_"..hot_spots[spot][spot_name], true)
		EnableTrigger("enter_"..hot_spots[spot][spot_name].."_glance", true)
	end
	EnableTrigger("kill_"..hot_spots[spot][spot_name], false)
	
	hot_spots[spot][current_location] = false
	previous_time_exited = hot_spots[spot][time_exited]
	hot_spots[spot][time_exited] = os.time()
	
	if (spot == medina) and hot_spots[boss][time_entered] then
		if hot_spots[boss][time_exited] then
			if (hot_spots[boss][time_entered] > hot_spots[boss][time_exited]) then
				exit_spot(boss)
			end
		else
			exit_spot(boss)
		end
		EnableTrigger("enter_boss", false)
	end
	
	if (spot == smugs) and hot_spots[captain][time_entered] then
		if hot_spots[captain][time_exited] then
			if (hot_spots[captain][time_entered] > hot_spots[captain][time_exited]) then
				exit_spot(captain)
			end
		else
			exit_spot(captain)
		end
		EnableTrigger("enter_captain", false)
	end
	
	if previous_time_exited then
		if time_last_entered - previous_time_exited > (120) then -- 2min rule
			if hot_spots[spot][kill_count] < hot_spots[spot][kill_reset] then
				hot_spots[spot][spot_down] = true
			end	
			if hot_spots[spot][kill_count] < hot_spots[spot][high_kill_reset] then
				hot_spots[spot][big_spawn] = false
			end
		end
	else
		if hot_spots[spot][kill_count] < hot_spots[spot][kill_reset] then
			hot_spots[spot][spot_down] = true
		end	
		if hot_spots[spot][kill_count] < hot_spots[spot][high_kill_reset] then
			hot_spots[spot][big_spawn] = false
		end
	end
	final_xp_checks = final_xp_checks or {} -- note that the "2min rule" doesnt apply, if we re-enter the spot then we reset final_xp
	table.insert(final_xp_checks, spot)
end

function kill_spot(spot, corpses)
	if debug_notes then Note("KILL: ",string.upper(hot_spots[spot][spot_name])) end
	if not(corpses) then corpses = 1 end
	hot_spots[spot][kill_count] = hot_spots[spot][kill_count] + corpses
	if hot_spots[spot][kill_count] >= hot_spots[spot][kill_reset] then
		hot_spots[spot][spot_down] = false
		hot_spots[spot][time_killed] = os.time()
	end
	if hot_spots[spot][kill_count] >= hot_spots[spot][high_kill_reset] then
		hot_spots[spot][big_spawn] = true
	end
	
end

function bury_count(bury_text)
	local c = {}
	local count = 0
	local numbers = {"one","two","three","four","five","six","seven","eight","nine","ten"}

	for k in string.gmatch(bury_text,'%w+') do table.insert(c, k) end
	local p = 0
	for i, v in ipairs(c) do
		if v == "corpse" then 
			p = 1
		elseif v == "corpses" then
			for ii, vv in ipairs(numbers) do
				if c[i-1] == vv then
					p = ii
				end
			end
		elseif string.find(v, "trolls?") and not(string.find(c[i-3], "heads?") or string.find(c[i-4], "heads?")) then
			count = count + p
		elseif string.find(v, "fighters?") and not(string.find(c[i-3], "heads?") or string.find(c[i-4], "heads?")) then
			count = count + p
		elseif string.find(v, "muggers?") and not(string.find(c[i-3], "heads?") or string.find(c[i-4], "heads?")) then
			count = count + p
		end
	end
	return count
end
--------------------------------------------------------------------------------
--   RESET, REVERT, RESTART FUNCTIONS
--------------------------------------------------------------------------------
function reset_spot(spot, mins) -- resets spot as if it has just been killed
	if not(mins) then mins = 0 end
	if spot then
		hot_spots[spot][time_entered] = os.time() - (mins*60)
		hot_spots[spot][time_exited] = os.time() - (mins*60)
		hot_spots[spot][time_killed] = os.time() - (mins*60)
		hot_spots[spot][spot_down] = false
		hot_spots[spot][big_spawn] = false
		hot_spots[spot][kill_count] = hot_spots[spot][kill_reset]
		hot_spots[spot][initial_xp] = false
		hot_spots[spot][final_xp] = false
	else
		for i, v in ipairs(hot_spots) do
			restart_spot(i)
		end
	end
end

function revert_spot(spot) -- resets to last time killed
	hot_spots[spot][time_entered] = hot_spots[spot][time_killed]
	hot_spots[spot][time_exited] = hot_spots[spot][time_killed]
	hot_spots[spot][spot_down] = false
	hot_spots[spot][kill_count] = hot_spots[spot][kill_reset]
	hot_spots[spot][initial_xp] = false
	hot_spots[spot][final_xp] = false	
end

function restart_spot(spot) -- reset spot as if it were never visited
	hot_spots[spot][time_entered] = false
	hot_spots[spot][time_exited] = false
	hot_spots[spot][time_killed] = false
	hot_spots[spot][spot_down] = false
	hot_spots[spot][big_spawn] = false
	hot_spots[spot][kill_count] = 0
	hot_spots[spot][initial_xp] = false
	hot_spots[spot][final_xp] = false	
end
--------------------------------------------------------------------------------
--   CREATE MINIWINOW HOTSPOTS (not to be confused with xp hotspots)
--------------------------------------------------------------------------------
function create_hotspots() -- create hotspot zones
	WindowAddHotspot(win, "header",  -- draggable header
                win_outter_padding, win_outter_padding, window_width-win_outter_padding-win_border,win_header+win_outter_padding,   -- rectangle
                 "",   -- MouseOver
                 "",   -- CancelMouseOver
                 "mousedown",
                 "cancelmousedown", 
                 "mouseup", 
				"Left-click to drag.\nRight-click for options.",  -- tooltip text
                 1, 0)  -- hand cursor
	WindowDragHandler(win, "header", "dragmove", "dragrelease", 0) 
	WindowAddHotspot(win, "stats",  -- stats
			win_outter_padding+win_border-1, window_height-win_stats_height-win_footer, window_width-win_outter_padding-win_border, window_height-win_footer,   -- rectangle
			 "mouseover",   -- MouseOver
			 "cancelmouseover",   -- CancelMouseOver
			 "mousedown",
			 "cancelmousedown", 
			 "mouseup", 
			 hot_spots[highlighted_name][long_name].." Stats",  -- tooltip text
			 1, 0)  -- hand cursor

end
--------------------------------------------------------------------------------
--   DRAG AND MINIWINOW HOTSPOT HANDLERS (not to be confused with xp hotspots) + MENU STUFF
--------------------------------------------------------------------------------
function mouseover(flags, hotspot_id)
	for i, v in ipairs(hot_spots) do
		if hotspot_id == "name_"..v[spot_name] then
			highlighted_name = i
			update_window()
			break
		elseif hotspot_id == "time_"..v[spot_name] then
			highlighted_time = i
			update_window()
			break				
		end
	end
end
function cancelmouseover(flags, hotspot_id)
	for i, v in ipairs(hot_spots) do
		if hotspot_id == "name_"..v[spot_name] then
			if not(menu_up) then
				highlighted_name = last_spot_visited or 1
			else
				highlighted_name = menu_up -- so highlight stays when menu is up
			end
			update_window()
			break
		elseif hotspot_id == "time_"..v[spot_name] then
			highlighted_time = false
			update_window()
			break				
		end
	end
end

function mousedown(flags, hotspot_id)
	if hotspot_id == "header" then
		startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)
	else
		for i, v in ipairs(hot_spots) do
			if hotspot_id == "name_"..v[spot_name] then
				highlighted_name = i
				update_window()
				break
			elseif hotspot_id == "time_"..v[spot_name] then
				highlighted_time = i
				update_window()
				break				
			end
		end
	end
end -- mousedown

function cancelmousedown(flags, hotspot_id)
	for i, v in ipairs(hot_spots) do
		if hotspot_id == "name_"..v[spot_name] then
			highlighted_name = last_spot_visited or 1
			update_window()
			break
		elseif hotspot_id == "time_"..v[spot_name] then
			highlighted_time = false
			update_window()
			break				
		end
	end
end -- cancelmousedown

function mouseup(flags, hotspot_id)
	if (hotspot_id == "header") and (flags == miniwin.hotspot_got_rh_mouse ) then
		menu_text = "!Help|>Options|"
		if debug_notes then
			menu_text = menu_text.."+Notes|Colour|"
		else
			menu_text = menu_text.."Notes|Colour|"
		end
		menu_text = menu_text..">Font|"
		--options: Arial, FixedSys, Consolas, Courier, Courier New, Dina, Lucida Console
		if varFont == "Arial" then
			menu_text = menu_text.."+Arial|Consolas|Courier|Courier New|Dina|FixedSys|Lucida Console|"
		elseif varFont == "Consolas" then
			menu_text = menu_text.."Arial|+Consolas|Courier|Courier New|Dina|FixedSys|Lucida Console|"
		elseif varFont == "Courier" then
			menu_text = menu_text.."Arial|Consolas|+Courier|Courier New|Dina|FixedSys|Lucida Console|"
		elseif varFont == "Courier New" then
			menu_text = menu_text.."Arial|Consolas|Courier|+Courier New|Dina|FixedSys|Lucida Console|"
		elseif varFont == "Dina" then
			menu_text = menu_text.."Arial|Consolas|Courier|Courier New|+Dina|FixedSys|Lucida Console|"
		elseif varFont == "FixedSys" then
			menu_text = menu_text.."Arial|Consolas|Courier|Courier New|Dina|+FixedSys|Lucida Console|"
		elseif varFont == "Lucida Console" then
			menu_text = menu_text.."Arial|Consolas|Courier|Courier New|Dina|FixedSys|+Lucida Console|"
		else
			menu_text = menu_text.."Arial|Consolas|Courier|Courier New|Dina|FixedSys|Lucida Console|"
		end
		menu_text = menu_text.."<|>Font Size|"
		if varFontSize == 8 then
			menu_text = menu_text.."+8|9|10|11|12|"
		elseif varFontSize == 9 then
			menu_text = menu_text.."8|+9|10|11|12|"
		elseif varFontSize == 10 then
			menu_text = menu_text.."8|9|+10|11|12|"
		elseif varFontSize == 11 then
			menu_text = menu_text.."8|9|10|+11|12|"
		elseif varFontSize == 12 then
			menu_text = menu_text.."8|9|10|11|+12|"
		end
		menu_text = menu_text.."<|>Width|"
		if varMiniWindowWidth == "default" then
			menu_text = menu_text.."+Default|Narrow|Slim|"
		elseif varMiniWindowWidth == "narrow" then
			menu_text = menu_text.."Default|+Narrow|Slim|"
		elseif varMiniWindowWidth == "slim" then
			menu_text = menu_text.."Default|Narrow|+Slim|"
		end
		menu_text = menu_text.."<|>Stats|"
		if varStatsWindowHeight == "full" then
			menu_text = menu_text.."+Full|Brief|Off|"
		elseif varStatsWindowHeight == "brief" then
			menu_text = menu_text.."Full|+Brief|Off|"
		elseif varStatsWindowHeight == "off" then
			menu_text = menu_text.."Full|Brief|+Off|"
		end
		menu_text = menu_text.."<|>Sorting|"
		if sort_mode == "colour" then
			menu_text = menu_text.."+Colour|Time|Static|<|>Show|All|None"
		elseif sort_mode == "time" then
			menu_text = menu_text.."Colour|+Time|Static|<|>Show|All|None"
		elseif sort_mode == "static" then
			menu_text = menu_text.."Colour|Time|+Static|<|>Show|All|None"
		end

		for i, v in ipairs(hot_spots) do
			if v[hidden] then
				menu_text = menu_text.."|"..v[long_name]
			else
				menu_text = menu_text.."|+"..v[long_name]
			end
		end
		
		menu_text = menu_text.."|<|<|>Reset|All"
		for i, v in ipairs(hot_spots) do
			menu_text = menu_text.."|"..v[long_name]
		end
		menu_text = menu_text.."|<|>Post Stats"
		for i, v in ipairs(hot_spots) do
			menu_text = menu_text.."|"..v[long_name]
		end
		result = WindowMenu (win, 
			WindowInfo (win, 14),  -- x
			WindowInfo (win, 15),   -- y
			menu_text)
		result = tonumber(result)
		if type(result) == "number" then
			if result == 1 then
				spot_help()
			elseif result == 2 then
				if debug_notes then
					debug_notes = false
				else
					debug_notes = true
				end
			elseif result == 3 then
				win_frame_colour = PickColour(ColourNameToRGB("gray"))
			--Reva: 7 new results here
			elseif result == 4 then
				varFont = "Arial"				
				SetFontSize()
			elseif result == 5 then
				varFont = "Consolas"				
				SetFontSize()
			elseif result == 6 then
				varFont = "Courier"				
				SetFontSize()
			elseif result == 7 then
				varFont = "Courier New"				
				SetFontSize()
			elseif result == 8 then
				varFont = "Dina"				
				SetFontSize()
			elseif result == 9 then
				varFont = "FixedSys"				
				SetFontSize()
			elseif result == 10 then
				varFont = "Lucida Console"				
				SetFontSize()
			--Reva: 5 new results here
			elseif result == 11 then
				varFontSize = 8				
				SetFontSize()
			elseif result == 12 then
				varFontSize = 9				
				SetFontSize()
			elseif result == 13 then
				varFontSize = 10			
				SetFontSize()
			elseif result == 14 then
				varFontSize = 11			
				SetFontSize()
			elseif result == 15 then
				varFontSize = 12			
				SetFontSize()
			--Reva: 3 new results here
			elseif result == 16 then
				varMiniWindowWidth = "default"				
				SetWindowWidth()
			elseif result == 17 then
				varMiniWindowWidth = "narrow"				
				SetWindowWidth()
			elseif result == 18 then
				varMiniWindowWidth = "slim"
				SetWindowWidth()
			--Reva: and 3 more!
			elseif result == 19 then
				varStatsWindowHeight = "full"				
				SetWindowHeight()
			elseif result == 20 then
				varStatsWindowHeight = "brief"				
				SetWindowHeight()
			elseif result == 21 then
				varStatsWindowHeight = "off"				
				SetWindowHeight()
			elseif result == 22 then
				sort_mode = "colour"
			elseif result == 23 then
				sort_mode = "time"
			elseif result == 24 then
				sort_mode = "static"
			elseif result == 25 then -- "All"
				for i, v in ipairs(hot_spots) do
					hot_spots[i][hidden] = false 
					shown_spot_count = shown_spot_count + 1
					SetWindowHeight()
				end
			elseif result == 26 then -- "None"
				for i, v in ipairs(hot_spots) do
					hot_spots[i][hidden] = true
					shown_spot_count = shown_spot_count + 1
					SetWindowHeight()
				end		
			elseif result <= #hot_spots + 26 then
				if hot_spots[result - 26][hidden] then
					hot_spots[result - 26][hidden] = false
					shown_spot_count = shown_spot_count + 1
					SetWindowHeight()
				else
					hot_spots[result - 26][hidden] = true
					shown_spot_count = shown_spot_count - 1
					SetWindowHeight()
				end
			elseif result == #hot_spots + 27 then
				reset_spot()
			elseif result <= #hot_spots*2 + 27 then
				reset_spot(result - #hot_spots - 27)
			elseif result <= #hot_spots*3 + 27 then
				spot_stat_to_group(result - #hot_spots*2 - 27)
			end
		end
		update_window()
	end
	
	for i, v in ipairs(hot_spots) do
		if (hotspot_id == "name_"..v[spot_name]) and (flags == miniwin.hotspot_got_rh_mouse) then
			menu_up = i
			if v[long_name] == "Smuggler's Cave" then
				menu_text = "^"..v[long_name].."|-|>Display Name|"
				if bDisplayAsSmugs == false then
					menu_text = menu_text .."+Smugglers|Smugs|<|Reset|Revert|Restart|Hide|Post Stats"
				else
					menu_text = menu_text .."Smugglers|+Smugs|<|Reset|Revert|Restart|Hide|Post Stats"
				end
			else
				menu_text = "^"..v[long_name].."|-|Reset|Revert|Restart|Hide|Post Stats"
			end
			result = WindowMenu (win, 
				WindowInfo (win, 14),  -- x
				WindowInfo (win, 15),   -- y
				menu_text)
			if result == "Post Stats" then
				spot_stat_to_group(i)
			elseif result == "Reset" then
				reset_spot(i)
			elseif result == "Revert" then
				revert_spot(i)	
			elseif result == "Restart" then
				restart_spot(i)				
			elseif result == "Hide" then
				hot_spots[i][hidden] = true
				shown_spot_count = shown_spot_count - 1
				SetWindowHeight()
			elseif result == "Smugglers" then
				bDisplayAsSmugs = false
				SetWindowWidth()
			elseif result == "Smugs" then
				bDisplayAsSmugs = true
				SetWindowWidth()
			end
			menu_up = false
			update_window()
			break
		end
	end
end -- mouseup

function dragmove(flags, hotspot_id)
	if hotspot_id == "header" then
		local posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
		EnableTimer("tic", false) -- otherwise window update from tic ends drag
		-- move the window to the new location
		WindowPosition(win, posx - startx, posy - starty, 0, 6)
  
		-- change the mouse cursor shape appropriately
		if posx < 0 or posx > GetInfo (281) or
		posy < 0 or posy > GetInfo (280) then
			check (SetCursor ( 11))   -- X cursor
		else
			check (SetCursor ( 1))   -- hand cursor
		end -- if
	end
end -- dragmove

function dragrelease(flags, hotspot_id)
	EnableTimer("tic", true)
end -- dragrelease
--------------------------------------------------------------------------------
--   MATH FUNCTIONS
--------------------------------------------------------------------------------
function Dec2Hex(nValue)
	if type(nValue) == "string" then
		nValue = String.ToNumber(nValue);
	end
	nHexVal = string.format("%X", nValue);  -- %X returns uppercase hex, %x gives lowercase letters
	sHexVal = nHexVal.."";
	if nValue < 16 then
		return "0"..tostring(sHexVal)
	else
		return sHexVal
	end
end

function round(num, idp)
  local mult = 10^(idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

function comma_value(amount)
  local formatted = amount
  while true do  
    formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
    if (k==0) then
      break
    end
  end
  return formatted
end
--------------------------------------------------------------------------------
--   MISC FUNCTIONS
--------------------------------------------------------------------------------
function spot_stat_to_group(spot)
	local v = hot_spots[spot]
	stat_line = string.upper(v[spot_name])..": kills: "..tostring(v[kill_count]).."/"..tostring(v[kill_reset]).." | "
	if v[initial_xp] and v[final_xp] then
		if v[final_xp] >= v[initial_xp] then
			xp_yield = v[final_xp] - v[initial_xp] 
		elseif timer_xp >= v[initial_xp] then -- probably unnesserery since initial_xp and final_xp are both reset upot spot entry
			xp_yield = timer_xp - v[initial_xp]
		else
			xp_yield = 0
		end
	elseif v[initial_xp] then
		if timer_xp >= v[initial_xp] then
			xp_yield = timer_xp - v[initial_xp]
		else
			xp_yield = 0
		end
	else
		xp_yield = 0
	end
	stat_line = stat_line..tostring(comma_value(xp_yield)).." xp in "
	if v[time_entered] and v[time_exited] then
		if v[time_exited] >= v[time_entered] then
			duration = v[time_exited] - v[time_entered]
		else
			duration = os.time() - v[time_entered]
		end
	elseif v[time_entered] then
		duration = os.time() - v[time_entered]
	else
		duration = 0
	end
	stat_line = stat_line..tostring(round((duration/60), 2)).." mins. | "		
	if xp_yield and (duration ~= 0) then
		xp_per_hr =  xp_yield / (duration/(60*60))
	else
		xp_per_hr = 0
	end
	stat_line = stat_line..tostring(comma_value(math.floor(xp_per_hr/1000))).."k xp/hr"
	Send("group say "..stat_line)
end

function fade_RGB(colour1, colour2, percentage)
	
	r1, g1, b1 = string.match(colour1, "#([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])")
	r2, g2, b2 = string.match(colour2, "#([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])")
	
	r3 = tonumber(r1, 16)*(100-percentage)/100.0 + tonumber(r2, 16)*(percentage)/100.0
    g3 = tonumber(g1, 16)*(100-percentage)/100.0 + tonumber(g2, 16)*(percentage)/100.0
    b3 = tonumber(b1, 16)*(100-percentage)/100.0 + tonumber(b2, 16)*(percentage)/100.0
	
	return ColourNameToRGB ("#"..Dec2Hex(r3).. Dec2Hex(g3)..Dec2Hex(b3))
end

function sort_spots(t, mode) -- this is how spots are sorted
    local T = { }
	if mode == "colour" then
		for i, v in ipairs(t) do
			T[i] = { i = i, v = {} }
			T[i].v[1] = get_spot_colour(i, time_killed, 0)
			T[i].v[2] = get_spot_colour(i, time_killed, 1)
			T[i].v[3] = get_spot_colour(i, time_entered, 0)
			T[i].v[4] = get_spot_colour(i, time_entered, 1)				
			if v[time_entered] then
				T[i].v[5] = v[time_entered]	
			else
				T[i].v[5] = os.time()
			end
			T[i].v[6] = i
		end
		table.sort(T, function(a, b)
			if (a.v[1] == b.v[1]) and (a.v[2] == b.v[2]) and (a.v[3] == b.v[3]) and (a.v[4] == b.v[4]) and (a.v[5] == b.v[5]) then -- sort by colour of last killed > time last entered > spot number
				return a.v[6] < b.v[6]
			elseif (a.v[1] == b.v[1]) and (a.v[2] == b.v[2]) and (a.v[3] == b.v[3]) and (a.v[4] == b.v[4]) then
				return a.v[5] < b.v[5]
			elseif (a.v[1] == b.v[1]) and (a.v[2] == b.v[2]) and (a.v[3] == b.v[3]) then	
				return a.v[4] > b.v[4]
			elseif (a.v[1] == b.v[1]) and (a.v[2] == b.v[2]) then
				return a.v[3] > b.v[3]
			elseif (a.v[1] == b.v[1]) then
				return a.v[2] > b.v[2]
			else
				return a.v[1] > b.v[1]
			end
		end)
	elseif mode == "time" then
		for i, v in ipairs(t) do
			T[i] = { i = i, v = {} }
			if v[time_entered] then
				T[i].v[1] = 0
				T[i].v[2] = v[time_entered]	
			else
				T[i].v[1] = 1
				T[i].v[2] = 0				
			end
			T[i].v[3] = i	
		end
		table.sort(T, function(a, b)
			if (a.v[1] == b.v[1]) and (a.v[2] == b.v[2]) then
				return a.v[3] < b.v[3]
			elseif (a.v[1] == b.v[1]) then
				return a.v[2] < b.v[2]
			else
				return a.v[1] > b.v[1]
			end
		end)
	elseif mode == "static" then
	
	local function ipairs_it(t, i)
		i = i+1
		local v = t[i]
		if v ~= nil then
			return i,v
		else
			return nil
		end
	end
	return ipairs_it, t, 0
	
	end
    local i = 0
    return function()
        i = i + 1
        if T[i] then
            return T[i].i, t[T[i].i]
        end
    end
end

--OLD one, updated
--Reva: Old version
function format_time (start_time, end_time)
	if start_time then
		if not(end_time) then end_time = os.time() end
		minutes = math.floor((end_time-start_time)/60)
		seconds = (end_time-start_time)-(minutes*60)
		if seconds < 10 then
			seconds = "0"..tostring(seconds)
		end
		if minutes < 10 then
			return(tostring("  "..minutes..":"..seconds))
		elseif minutes < 100 then
			return(tostring(" "..minutes..":"..seconds))
		else
			return(tostring(minutes..":"..seconds))
		end
	
	else
		return "   :  "
	end
end

--Reva: redone with slim added
function format_time (start_time, end_time)
	if start_time then
		if not(end_time) then end_time = os.time() end
		minutes = math.floor((end_time-start_time)/60)
		seconds = string.format("%02d", (end_time-start_time)-(minutes*60))
		if varMiniWindowWidth == "slim" then
			if minutes < 10 then
				if varFont == "Arial" then
					return(tostring("  " .. minutes))
				else
					return(tostring(" " .. minutes))
				end
			else
				return(tostring(minutes))
			end
		elseif varMiniWindowWidth == "narrow" then
			if minutes < 10 then
				--Arial spaces and -  and : are 1/2 the size of numbers so we have to double things
				if varFont == "Arial" then
					return(tostring("  " .. minutes..":"..seconds))
				else
					return(tostring(" " .. minutes..":"..seconds))
				end
			else
				return(tostring(minutes..":"..seconds))
			end
		else --Default
			if minutes < 10 then
				if varFont == "Arial" then
					return(tostring("    "..minutes..":"..seconds))
				else
					return(tostring("  "..minutes..":"..seconds))
				end
			elseif minutes < 100 then
				if varFont == "Arial" then
					return(tostring("  "..minutes..":"..seconds))
				else
					return(tostring("  "..minutes..":"..seconds))
				end
			else
				if varFont == "Arial" then
					return(tostring(minutes..":"..seconds))
				else
					return(tostring(minutes..":"..seconds))
				end
			end
		end
	else
		if varMiniWindowWidth == "slim" then
			if varFont == "Arial" then
				return " -- "
			else
				return "--"
			end
		elseif varMiniWindowWidth == "narrow" then
			if varFont == "Arial" then
				return "    :    "
			else
				return "  :  "
			end
		else
			if varFont == "Arial" then
				return "      :    "
			else
				return "   :  "
			end
		end
	end
end

--------------------------------------------------------------------------------
--   GETTING DATA FROM MXP
--------------------------------------------------------------------------------
--Reva: no longer used, gets data from GMCP
--[[
function OnPluginMXPsetEntity (sIn)
	local value = utils.split(sIn, '=')
	local attribute = value[1]
	value = tonumber( value[2] )
  
	if attribute == "xp" then
		timer_xp = tonumber(value) -- get xp from mxp
		set_xp(timer_xp)
	end
	
end
]]--
function set_xp(current_xp)
	if initial_xp_checks then
		for i, v in ipairs(initial_xp_checks) do
			hot_spots[v][initial_xp] = current_xp
		end
		initial_xp_checks = nil
	end
	if final_xp_checks then
		for i, v in ipairs(final_xp_checks) do
			hot_spots[v][final_xp] = current_xp
		end
		final_xp_checks = nil
	end
end
--------------------------------------------------------------------------------
--   INSTALL AND SAVE
--------------------------------------------------------------------------------
function OnPluginInstall ()
end

function OnPluginEnable ()
	WindowShow (win,  true)
end

function OnPluginDisable()
	WindowShow (win,  false)
end

function OnPluginClose ()
	WindowShow (win,  false)
end

function OnPluginSaveState ()
	SetVariable("hot_spots", json.encode(hot_spots))
--[[
	SetVariable ("hot_spots", 
               "hot_spots = " .. serialize.save_simple (hot_spots))
			   ]]--
	SetVariable ("window_pos_x", WindowInfo (win, 10))
	SetVariable ("window_pos_y", WindowInfo (win, 11))
	SetVariable ("sort_mode", sort_mode)
	SetVariable ("debug_notes", tostring(debug_notes))
	SetVariable ("win_frame_colour", tostring(win_frame_colour))
	SetVariable ("debug_notes", tostring(debug_notes))
	SetVariable ("bDisplayAsSmugs", tostring(bDisplayAsSmugs))
	--Reva: added for size info
	SetVariable ("varFont", varFont)
	SetVariable ("varFontSize", varFontSize)
	SetVariable ("varMiniWindowWidth", varMiniWindowWidth)
	SetVariable ("varStatsWindowHeight", varStatsWindowHeight)
 
end -- function OnPluginSaveState
--------------------------------------------------------------------------------
--   SYNC FUNCTIONS
--------------------------------------------------------------------------------
function sync(player)
	local sync_text = "tell "..player.." "..(GetPluginInfo (GetPluginID (), 19))..":"..tostring(os.time())..":"
	for i, v in ipairs(hot_spots) do
		sync_text = sync_text..tostring(v[kill_count])..","
		if type(v[time_entered]) == "number" then
			sync_text = sync_text..tostring(os.time()-v[time_entered])..","
		else
			sync_text = sync_text.."f,"
		end
		if type(v[time_exited]) == "number" then
			sync_text = sync_text..tostring(os.time()-v[time_exited])..","
		else
			sync_text = sync_text.."f,"
		end
		if type(v[time_killed]) == "number" then
			sync_text = sync_text..tostring(os.time()-v[time_killed]).."|"
		else
			sync_text = sync_text.."f|"
		end
	end
	Send(sync_text) 
end

function get_sync(version, time_sent, sync_data)
	
	sync_data = utils.split(sync_data or {}, "|")
	for i, v in ipairs(sync_data) do
		sync_data[i] = utils.split(sync_data[i] or {}, ",") -- 1 = kill_count, 2 = time_entered, 3 = time_exited, 4 = time_killed
	end
	for i, v in ipairs(sync_data) do
		if i > #hot_spots or v[2] == nil then break end
		local k_count = tonumber(v[1])
		if v[2] ~= "f" then time_ent = tonumber(time_sent) - tonumber(v[2]) else time_ent = false end
		if v[3] ~= "f" then time_ext = tonumber(time_sent) - tonumber(v[3]) else time_ext = false end
		if v[4] ~= "f" then time_kill = tonumber(time_sent) - tonumber(v[4]) else time_kill = false end
		local spot_change = false
		--Note(hot_spots[i][spot_name],": time_ent ",time_ent)
		--Note(hot_spots[i][spot_name],": time_ext ",time_ext)
		--Note(hot_spots[i][spot_name],": time_kill ",time_kill)
		--Note(hot_spots[i][spot_name],": k_count ",k_count)
		if time_ent then
			if hot_spots[i][time_entered] then
				if time_ent > hot_spots[i][time_entered] then
					hot_spots[i][time_entered] = time_ent
					spot_change = true
				end
			else
				hot_spots[i][time_entered] = time_ent
				spot_change = true
				end
		end
		
		if time_ext then
			if hot_spots[i][time_exited] then
				if time_ext > hot_spots[i][time_exited] then
					hot_spots[i][time_exited] = time_ext
					spot_change = true
				end
			else
				hot_spots[i][time_exited] = time_ext
				spot_change = true
				end
		end
		
		if time_kill then
			if hot_spots[i][time_killed] then
				if time_kill > hot_spots[i][time_entered] then
					hot_spots[i][time_killed] = time_kill
					spot_change = true
				end
			else
				hot_spots[i][time_killed] = time_kill
				spot_change = true
				end
		end
		
		if spot_change then
			hot_spots[i][initial_xp] = false
			hot_spots[i][final_xp] = false
			hot_spots[i][kill_count] = k_count
			if k_count >= hot_spots[i][kill_reset] then
				hot_spots[i][spot_down] = false
			else
				hot_spots[i][spot_down] = true
			end
			if k_count >= hot_spots[i][high_kill_reset] then
				hot_spots[i][big_spawn] = true
			else
				hot_spots[i][big_spawn] = false
			end			
		end
		
	end
end

function SetWindowWidth()
	spot_name_width = 0
	for i, v in ipairs(hot_spots) do
		if WindowTextWidth (win, "f", v[spot_name]) > spot_name_width then
			spot_name_width = WindowTextWidth (win, "f", display_spot_name(v[spot_name]))
		end
	end
	spot_name_width = spot_name_width + WindowTextWidth (win, "f", "!")
	--Very slim only shows minutes, narrow includes seconds but only shows 2 digits (anyways over 60 mins is meaningless)
	if varMiniWindowWidth == "slim" then
		spots_window_width = spot_name_width+win_horizontal_spacing+WindowTextWidth (win, "f", "00")+(win_inner_padding*2)
	elseif varMiniWindowWidth == "narrow" then
		spots_window_width = spot_name_width+win_horizontal_spacing+WindowTextWidth (win, "f", "00:00")+(win_inner_padding*2)
	else --Default
		spots_window_width = spot_name_width+win_horizontal_spacing+WindowTextWidth (win, "f", "000:00")+(win_inner_padding*2)
	end
	window_width = (win_outter_padding*2)+spots_window_width
end

function SetWindowHeight()
	spots_window_height = (font_height+win_vertical_spacing)*shown_spot_count+win_vertical_spacing
	if varStatsWindowHeight == "off" then
		win_stats_height = (4+1)*(font_height+win_vertical_spacing)
		window_height = (win_outter_padding*2)+win_header+spots_window_height+win_footer		
	elseif varStatsWindowHeight == "brief" then
		win_stats_height = (1+1)*(font_height+win_vertical_spacing)
		window_height = (win_outter_padding*2)+win_header+spots_window_height+win_stats_height+win_footer
	else --Default
		win_stats_height = (4+1)*(font_height+win_vertical_spacing)
		window_height = (win_outter_padding*2)+win_header+spots_window_height+win_stats_height+win_footer
	end

	--Removing hotspots from stat window so they can be redone.
	for i, v in sort_spots(hot_spots, sort_mode) do
		if not(v[hidden]) and WindowHotspotInfo(win, "name_"..hot_spots[i][spot_name], 1) ~= nil then
				WindowDeleteHotspot (win, "name_"..hot_spots[i][spot_name])
		end
	end
end

--This is used also for font changes as it affects height
function SetFontSize(arg)
	WindowFont (win, "f", varFont, varFontSize, false, false, false, false)
	WindowFont (win, "f2", varFont, varFontSize, false, false, false, true) -- strikethrough
	--This one stays small at size 8 to fit
	WindowFont (win, "f3", varFont, 8, false, false, false, false) -- stats font

	font_height = WindowFontInfo (win, "f", 1)
	font_height3 = WindowFontInfo (win, "f3", 1)
	win_header = font_height + win_inner_padding
	win_footer = win_header
	--Both of these change with font changes
	SetWindowWidth()
	SetWindowHeight()
end
--------------------------------------------------------------------------------
--   DEFINE XP SPOT TABLE AND RELATED VARIABLES
--------------------------------------------------------------------------------
need_update = false
update_reason = ""

function define_spots() -- create table for various spot values
	spot_name=1; long_name=2; stage1=3; stage2=4; stage3=5; stage4=6; stage5=7; kill_count=8; kill_reset=9; high_kill_reset=10; time_entered=11
	time_exited =12; time_killed=13; spot_down=14; big_spawn=15; current_location=16; hidden=17; initial_xp=18; final_xp=19
	hot_spots = {
		--  [            names             ] [   color ranges  ][ resets  ] [       times       ][         display          ][     xp     ]
		--  {1.          2.                  3.  4.  5.  6.  7.  8. 9.  10. 11.    12.    13.    14.    15.    16.    17.    18.    19.
			{"smugs",   "Smuggler's Cave",   6,  10, 15, 20, 24, 0, 9,  18, false, false, false, false, false, false, false, false, false},
			{"shades",  "Shades",            8,  12, 18, 28, 32, 0, 11, 20, false, false, false, false, false, false, false, false, false},
			{"medina",  "Medina",            10, 14, 20, 35, 40, 0, 10, 18, false, false, false, false, false, false, false, false, false},
			{"boss",    "Triad Boss",        20, 35, 45, 60, 61, 0, 1,  99, false, false, false, false, false, false, false, false, false},
			{"rathole", "Hlakket",           29, 30, 40, 60, 61, 0, 1,  99, false, false, false, false, false, false, false, false, false},
			{"crocs",   "Ephebian Crocs",    29, 30, 35, 40, 50, 0, 1,  9,  false, false, false, false, false, false, false, false, false},
			{"cguards", "Ceremonial Guards", 27, 30, 35, 40, 50, 0, 4,  9,  false, false, false, false, false, false, false, false, false},
			{"casino",  "Casino",            27, 30, 37, 45, 50, 0, 2,  4,  false, false, false, false, false, false, false, false, false},
			{"snail",   "Snail",             30, 40, 50, 60, 70, 0, 5,  10, false, false, false, false, false, false, false, false, false},
			{"dojo",    "Dojo",              25, 30, 35, 40, 50, 0, 4,  7,  false, false, false, false, false, false, false, false, false},
			{"giants",  "Giants",            35, 40, 45, 50, 60, 0, 3,  9,  false, false, false, false, false, false, false, false, false},
			{"stables", "Stables",           27, 30, 37, 45, 50, 0, 2,  4,  false, false, false, false, false, false, false, false, false},
			{"shaker",  "Salt Shaker",       27, 30, 40, 45, 50, 0, 1,  8,  false, false, false, false, false, false, false, false, false},
			{"grflx",   "Grflx, Lower",      20, 30, 37, 50, 60, 0, 8,  16, false, false, false, false, false, false, false, false, false},
			{"parades", "Parades",           26, 35, 45, 50, 60, 0, 6,  9,  false, false, false, false, false, false, false, false, false},
			{"delbert", "Delbert",           20, 30, 35, 45, 50, 0, 1,  6,  false, false, false, false, false, false, false, false, false},
			{"bmarket", "Black-Market" ,     20, 30, 35, 45, 50, 0, 3,  6,  false, false, false, false, false, false, false, false, false},
			{"oasis",   "Oasis",             50, 60, 80, 100,120,0, 11, 22, false, false, false, false, false, false, true,  false, false},
			{"cits",    "Citadel Guards",    27, 30, 40, 45, 50, 0, 2,  10, false, false, false, false, false, false, false, false, false},
			{"cats",    "Cat's-Tail",        43, 44, 45, 50, 55, 0, 2,  4,  false, false, false, false, false, false, true,  false, false},
			{"dhs",     "Dragon Head Square",43, 44, 45, 50, 55, 0, 1,  3,  false, false, false, false, false, false, true,  false, false},
			{"pizza",	"Pizzeria",          27, 30, 37, 45, 50, 0, 2,  4,  false, false, false, false, false, false, false, false, false},
			{"coons",	"Cocoons",           27, 30, 40, 45, 50, 0, 2,  12, false, false, false, false, false, false, false, false, false},
			{"docks",	"Genua Docks",       6,  10, 15, 20, 24, 0, 15, 28, false, false, false, false, false, false, false, false, false},
			{"xroads",	"Crossroads",        6,  10, 15, 20, 24, 0, 15, 28, false, false, false, false, false, false, false, false, false},
			{"h&e",	   "Hatchet and Entrail",29, 30, 40, 60, 50, 0, 6,  10, false, false, false, false, false, false, false, false, false},
			{"grflx2",  "Grflx, Upper",      20, 30, 37, 50, 60, 0, 8,  20, false, false, false, false, false, false, false, false, false},
			{"cabbage", "Flaming Cabbage",   20, 30, 35, 45, 50, 0, 7,  9,  false, false, false, false, false, false, false, false, false},
			{"liar", 	"Zoon Liar",         20, 30, 35, 45, 50, 0, 1,  6,  false, false, false, false, false, false, false, false, false},
			{"captain", "Smuggler Captain",  20, 35, 45, 60, 61, 0, 1,  99, false, false, false, false, false, false, false, false, false},
		}

--[[
	if (GetVariable("hot_spots") ~= nil) then
		hot_spots = (json.decode(GetVariable("hot_spots")))
	end
	]]--

	if need_update == false then 
		if (GetVariable("hot_spots") ~= nil) then
			old_hot_spots = (json.decode(GetVariable("hot_spots")))
			if #hot_spots > #old_hot_spots then
				need_update = true
				update_reason = "New spot added"
			end
			for i, v in ipairs (old_hot_spots) do
				if hot_spots[i] ~= nil then
					--check if spot name changed
					if hot_spots[i][1] ~= nil and old_hot_spots[i][1] ~= hot_spots[i][1] then
						need_update = true
						if not string.match(update_reason, "Spot name changed") then
							if update_reason == "" then
								update_reason = "Spot name changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Spot name changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if long name changed
					if hot_spots[i][2] ~= nil and old_hot_spots[i][2] ~= hot_spots[i][2] then
						need_update = true
						if not string.match(update_reason, "Long name changed") then
							if update_reason == "" then
								update_reason = "Long name changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Long name changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if stage1 changed
					if hot_spots[i][3] ~= nil and old_hot_spots[i][3] ~= hot_spots[i][3] then
						need_update = true
						if not string.match(update_reason, "Stage1 changed") then
							if update_reason == "" then
								update_reason = "Stage1 changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Stage1 changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if stage2 changed
					if hot_spots[i][4] ~= nil and old_hot_spots[i][4] ~= hot_spots[i][4] then
						need_update = true
						if not string.match(update_reason, "Stage2 changed") then
							if update_reason == "" then
								update_reason = "Stage2 changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Stage2 changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if stage3 changed
					if hot_spots[i][5] ~= nil and old_hot_spots[i][5] ~= hot_spots[i][5] then
						need_update = true
						if not string.match(update_reason, "Stage3 changed") then
							if update_reason == "" then
								update_reason = "Stage3 changed (" .. i .. ")"
							else	
								update_reason = update_reason .. "& Stage3 changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if stage4 changed
					if hot_spots[i][6] ~= nil and old_hot_spots[i][6] ~= hot_spots[i][6] then
						need_update = true
						if not string.match(update_reason, "Stage4 changed") then
							if update_reason == "" then
								update_reason = "Stage4 changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Stage4 changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
					--check if stage5 changed
					if hot_spots[i][7] ~= nil and old_hot_spots[i][7] ~= hot_spots[i][7] then
						need_update = true
						if not string.match(update_reason, "Stage5 changed") then
							if update_reason == "" then
								update_reason = "Stage5 changed (" .. i .. ")"
							else
								update_reason = update_reason .. "& Stage5 changed (" .. i .. ")"
							end
						else
							if not string.match(update_reason, "(" .. i .. ")") then
								update_reason = update_reason .. "& (" .. i .. ")"
							end
						end
					end
				else
					need_update = true
					if update_reason == "" then
						update_reason = "Spot removed"
					else
						update_reason = update_reason .. "& Spot removed"
					end
				end
			end
			hot_spots = old_hot_spots
			old_hot_spots = nil
		end
		if need_update == true then
			ColourNote("magenta", "", "Update\Change detected, type 'update timer' in the next 30 seconds to update, if you already updated ignore this message.  NOTE: All spots will unhide on update.")
			ColourNote("orange", "", "["..update_reason.."]")
			EnableAlias("update_timer", true)
			DoAfterSpecial (30, 'EnableAlias("update_timer", false)', sendto.script)
		end
	--[[
	else
		if (GetVariable("hot_spots") ~= nil) then
			old_hot_spots = (json.decode(GetVariable("hot_spots")))
			for i, v in ipairs(hot_spots) do
				if old_hot_spots[i] == nil then
					table.insert(old_hot_spots, v)
					ColourNote("magenta", "", "New spot added. (" .. hot_spots[i][2] ")")
				elseif hot_spots[i][1] ~= old_hot_spots[i][1] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" spot name changed from '"..old_hot_spots[i][1].."' to "..hot_spots[i][1].."'.")
					old_hot_spots[i][1] = hot_spots[i][1]
				elseif hot_spots[i][2] ~= old_hot_spots[i][2] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" long name changed from '"..old_hot_spots[i][2].."' to "..hot_spots[i][2].."'.")
					old_hot_spots[i][2] = hot_spots[i][2]
				elseif hot_spots[i][3] ~= old_hot_spots[i][3] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" stage1 changed from '"..old_hot_spots[i][3].."' to "..hot_spots[i][3].."'.")
					old_hot_spots[i][3] = hot_spots[i][3]
				elseif hot_spots[i][4] ~= old_hot_spots[i][4] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" stage2 changed from '"..old_hot_spots[i][4].."' to "..hot_spots[i][4].."'.")
					old_hot_spots[i][4] = hot_spots[i][4]
				elseif hot_spots[i][5] ~= old_hot_spots[i][5] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" spot name changed from '"..old_hot_spots[i][5].."' to "..hot_spots[i][5].."'.")
					old_hot_spots[i][5] = hot_spots[i][5]
				elseif hot_spots[i][6] ~= old_hot_spots[i][6] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" spot name changed from '"..old_hot_spots[i][6].."' to "..hot_spots[i][6].."'.")
					old_hot_spots[i][6] = hot_spots[i][6]
				elseif hot_spots[i][7] ~= old_hot_spots[i][7] then
					ColourNote("magenta", "", "Spot '" .. hot_spots[i][2] "'" spot name changed from '"..old_hot_spots[i][7].."' to "..hot_spots[i][7].."'.")
					old_hot_spots[i][7] = hot_spots[i][7]
				end
			end
		end]]--
	end

	--if we updated, lets clear numbers otherwise they will be duplicates
	if need_update == true then
		for i, v in ipairs (hot_spots) do
			--Check if we have duplicate names of hotspots
			if _G[hot_spots[i][spot_name]]  ~= nil then
				_G[hot_spots[i][spot_name]] = nil
			end
		end
	end
	
	--Lets see if we can make this generic...
	--Change so it isn't repetitive for same names!!
	for i, v in ipairs (hot_spots) do
		--Check if we have duplicate names of hotspots
		if _G[hot_spots[i][spot_name]]  ~= nil then
			ColourNote("red", "black", "SpotTimer ERROR: Duplicate Spot Name '" .. hot_spots[i][spot_name] .. "', both spots will display as the latter.")
		end
		_G[hot_spots[i][spot_name]] = i
	end

end

function update_spots()
	define_spots()

	shown_spot_count = 0
	for i, v in ipairs(hot_spots) do
		if not(v[hidden]) then
			shown_spot_count = shown_spot_count + 1
		end
	end

	spots_window_height = (font_height+win_vertical_spacing)*shown_spot_count+win_vertical_spacing
	SetWindowHeight()
	create_hotspots()
	update_window()
	ColourNote("magenta", "", "Timer updated.")
	need_update = false
	EnableAlias("update_timer", false)
end

--------------------------------------------------------------------------------
--   START EXECUTION HERE
--------------------------------------------------------------------------------
require "serialize"  -- needed to serialize table to string

define_spots() -- creates hot_spots table
--COMMENT THIS OUT TO RELOAD!!
--Change to allow changes!
--assert (loadstring (GetVariable ("hot_spots") or "")) ()
--ToTest = GetVariable("hot_spots")
--ColourNote("black", "red", "!" .. ToTest)
--objChatFilters = json.decode(GetVariable("objChatFilters"))
--SetVariable("objChatFilters", json.encode(objChatFilters))
-- load some variables we'll need later
timer_xp = 0
highlighted_name = 1

-- define colors
gray = "#808080"
red = "#FF0000"
green = "#00FF00"
yellow = "#FFFF00"
white =	"#FFFFFF"

-- define window values
win = "hot_spots" .. GetPluginID ()
WindowCreate (win, 0, 0, 0, 0, miniwin.pos_center_all, 0, ColourNameToRGB("black")) -- load dummy window so we can load fonts

shown_spot_count = 0
for i, v in ipairs(hot_spots) do
	if not(v[hidden]) then
		shown_spot_count = shown_spot_count + 1
	end
end

win_vertical_spacing = 2
win_horizontal_spacing = 5
win_inner_padding = 5
win_outter_padding = 5

--Reva: load saved size info, defaults are set here as well
varFont = GetVariable("varFont")
if varFont == nil then
  varFont = "Arial"
end
varFontSize = tonumber(GetVariable("varFontSize"))
if varFontSize == nil then
  varFontSize = 9
end
varMiniWindowWidth = GetVariable("varMiniWindowWidth")
if varMiniWindowWidth == nil then
  varMiniWindowWidth = "default"
end
varStatsWindowHeight = GetVariable("varStatsWindowHeight")
if varStatsWindowHeight == nil then
  varStatsWindowHeight = "full"
end

--Allow for Smuggler's to be displayed as Smugs
bDisplayAsSmugs = false
if (GetVariable("bDisplayAsSmugs") == "true") then
  bDisplayAsSmugs = true
end

SetFontSize()
--Reva: done in SetFontSize
--OLD:
--[[
font_size = 8
win_header = font_height + win_inner_padding
win_footer = win_header
]]--
--Reva: movedin SetWindowHeight to be variable
--OLD: win_stats_height = (4+1)*(font_height+win_vertical_spacing)

--Reva: added for brief stats
--REMOVED, can delete next line
win_border = 2
win_bg_colour = ColourNameToRGB("black")
win_corner = 10

--Reva: Changed to function so it can be changed later
--OLD: 	spots_window_width = spot_name_width+win_horizontal_spacing+WindowTextWidth (win, "f", "000:00")+(win_inner_padding*2)
SetWindowWidth()

spots_window_height = (font_height+win_vertical_spacing)*shown_spot_count+win_vertical_spacing
--OLD: spots_window_width = spot_name_width+win_horizontal_spacing+WindowTextWidth (win, "f", "000:00")+(win_inner_padding*2)
--Reva: moved to part of SetWindowWidth function 

SetWindowHeight()
--OLD: window_height = (win_outter_padding*2)+win_header+spots_window_height+win_stats_height+win_footer
--Reva: movedin SetWindowHeight to be variable

-- load window positions
window_pos_x = tonumber(GetVariable("window_pos_x"))
window_pos_y = tonumber(GetVariable("window_pos_y"))
WindowCreate (win, 0, 0, window_width, window_height, miniwin.pos_center_all, 4, ColourNameToRGB("cyan"))
if (type(window_pos_x) == "number") and (type(window_pos_x) == "number") then
	WindowPosition(win, window_pos_x, window_pos_y, 0, 6)
end

-- load options variables
sort_mode = (GetVariable("sort_mode"))
if sort_mode == nil then
  sort_mode = "colour"
end

debug_notes = false
if (GetVariable("debug_notes") == "true") then
  debug_notes = true
end

win_frame_colour = tonumber(GetVariable("win_frame_colour"))
if type(win_frame_colour) ~= "number" then
	win_frame_colour = ColourNameToRGB("gray")
end

create_hotspots()
update_window()


-- to do:
-- docks, h&e, pizza, xroads, grflx+, ephbar, bandits, rouges, fez, zoon, cabbage, wgate, walls
-- make stats retractable
-- scry stuff
--Ephebe bar- 8:35 pm
]]>
</script>

</muclient>	
